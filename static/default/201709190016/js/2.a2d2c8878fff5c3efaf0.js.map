{"version":3,"sources":["webpack:///static/default/201709190016/js/2.a2d2c8878fff5c3efaf0.js","webpack:///./~/.3.0.8@wangeditor/release/wangEditor.js?7d70","webpack:///./src/pages/article/edit.vue","webpack:///./src/pages/article/edit.vue?3feb","webpack:///./src/pages/article/edit.vue?3e39","webpack:///./src/pages/article/edit.vue?3296","webpack:///edit.vue"],"names":["webpackJsonp","19","module","exports","__webpack_require__","global","factory","this","createElemByHTML","html","div","document","createElement","innerHTML","children","isDOMList","selector","HTMLCollection","NodeList","querySelectorAll","result","DomElement","selectorResult","nodeType","replace","trim","indexOf","length","i","$","objForEach","obj","fn","key","hasOwnProperty","call","arrForEach","fakeArr","item","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","Bold","editor","$elem","type","_active","DropList","menu","opt","_this","$container","$title","titleHtml","replaceLang","addClass","append","list","onClick","_emptyFn","$list","forEach","elemHtml","value","$li","on","e","hideTimeoutId","setTimeout","hide","_rendered","_show","Head","droplist","width","_command","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","BackColor","Quote","Code","Emoticon","Table","Video","Image","Menus","menus","getPasteText","clipboardData","originalEvent","pasteText","window","getData","getPasteHtml","filterStyle","pasteHtml","docSplitHtml","split","getPasteImgs","txt","items","test","push","getAsFile","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$textContainerElem","$bar","UploadImg","Editor","toolbarSelector","textSelector","Error","id","editorId","customConfig","polyfill","Object","assign","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","prototype","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","constructor","elem","get","first","last","types","addEventListener","off","removeEventListener","attr","val","getAttribute","setAttribute","className","arr","filter","join","removeClass","css","currentStyle","style","styleArr","resultArr","map","show","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","focus","parentUntil","_currentElem","results","equal","insertBefore","$referenceNode","referenceNode","parentNode","insertAfter","lastChild","nextSibling","config","zIndex","debug","pasteFilterStyle","showLinkImg","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","token","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","success","fail","error","timeout","UA","_ua","navigator","userAgent","isWebkit","reg","isIE","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","str","langArgs","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","$body","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","title","tpl","$content","_index","stopPropagation","events","event","needToHide","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","link","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","$selectionELem","selectionText","$parent","content","$targetELem","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","faceHtml","faceStr","handHtml","handStr","_insert","emoji","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","_this2","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$tbody","$trs","trLength","tr","locationData","trData","$currentTr","tdData","newTr","tdIndex","$trParent","$currentTd","name","toLowerCase","newTd","$table","textValId","width30","width50","width100","delBtn","tabsConfig","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","$file","fileElem","click","fileList","$linkUrl","url","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","bold","head","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","configMenus","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","saveRange","pHandle","$p","codeHandle","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","keyCode","txtHtml","ex","pasteFiles","selectedClass","img","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","execCommand","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","Date","now","timeoutId","_hide","_typeof","Symbol","iterator","_alert","alertInfo","debugInfo","customAlert","alert","onload","onerror","onabort","src","_this3","maxSize","maxSizeM","maxLength","uploadImgMaxLength","hooks","resultFiles","errInfo","file","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","encodeURIComponent","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","data","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","_initConfig","langConfig","lang","RegExp","_initDom","$toolbarSelector","config$$1","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchange","currentHtml","create","inlinecss","getElementsByTagName","wangEditor","30","Component","49","version","sources","names","mappings","sourcesContent","sourceRoot","67","locals","130","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","separator","path","_v","ref","model","form","label-width","staticStyle","label","drag","action","upload_url","show-file-list","before-upload","beforeAvatarUpload","on-progress","onAvatarUpload","on-success","handleAvatarScucess","mutiple","_e","thumb_url","callback","$$v","expression","author","placeholder","_l","digest","onSubmit","staticRenderFns","166","_interopRequireDefault","__esModule","default","defineProperty","_wangeditor","_wangeditor2","displayType","0","1","articleType","2","3","4","wangE","upload_status","computed","mounted","wangEditorInit","getArticle","$apiurl","attached","methods","$rqt","post","$route","params","res","detail","that","$auth","addImageToContent","console","log","info","isLt2M","$message","message","components"],"mappings":"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","file":"static/default/201709190016/js/2.a2d2c8878fff5c3efaf0.js","sourcesContent":["webpackJsonp([2,16],{\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t\t true ? module.exports = factory() :\n\t\ttypeof define === 'function' && define.amd ? define(factory) :\n\t\t(global.wangEditor = factory());\n\t}(this, (function () { 'use strict';\n\t\n\t/*\n\t    poly-fill\n\t*/\n\t\n\tvar polyfill = function () {\n\t\n\t    // Object.assign\n\t    if (typeof Object.assign != 'function') {\n\t        Object.assign = function (target, varArgs) {\n\t            // .length of function is 2\n\t            if (target == null) {\n\t                // TypeError if undefined or null\n\t                throw new TypeError('Cannot convert undefined or null to object');\n\t            }\n\t\n\t            var to = Object(target);\n\t\n\t            for (var index = 1; index < arguments.length; index++) {\n\t                var nextSource = arguments[index];\n\t\n\t                if (nextSource != null) {\n\t                    // Skip over if undefined or null\n\t                    for (var nextKey in nextSource) {\n\t                        // Avoid bugs when hasOwnProperty is shadowed\n\t                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n\t                            to[nextKey] = nextSource[nextKey];\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return to;\n\t        };\n\t    }\n\t\n\t    // IE 中兼容 Element.prototype.matches\n\t    if (!Element.prototype.matches) {\n\t        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n\t            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n\t                i = matches.length;\n\t            while (--i >= 0 && matches.item(i) !== this) {}\n\t            return i > -1;\n\t        };\n\t    }\n\t};\n\t\n\t/*\n\t    DOM 操作 API\n\t*/\n\t\n\t// 根据 html 代码片段创建 dom 对象\n\tfunction createElemByHTML(html) {\n\t    var div = void 0;\n\t    div = document.createElement('div');\n\t    div.innerHTML = html;\n\t    return div.children;\n\t}\n\t\n\t// 是否是 DOM List\n\tfunction isDOMList(selector) {\n\t    if (!selector) {\n\t        return false;\n\t    }\n\t    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\t// 封装 document.querySelectorAll\n\tfunction querySelectorAll(selector) {\n\t    var result = document.querySelectorAll(selector);\n\t    if (isDOMList(result)) {\n\t        return result;\n\t    } else {\n\t        return [result];\n\t    }\n\t}\n\t\n\t// 创建构造函数\n\tfunction DomElement(selector) {\n\t    if (!selector) {\n\t        return;\n\t    }\n\t\n\t    // selector 本来就是 DomElement 对象，直接返回\n\t    if (selector instanceof DomElement) {\n\t        return selector;\n\t    }\n\t\n\t    this.selector = selector;\n\t\n\t    // 根据 selector 得出的结果（如 DOM，DOM List）\n\t    var selectorResult = [];\n\t    if (selector.nodeType === 1) {\n\t        // 单个 DOM 节点\n\t        selectorResult = [selector];\n\t    } else if (isDOMList(selector)) {\n\t        // DOM List\n\t        selectorResult = selector;\n\t    } else if (typeof selector === 'string') {\n\t        // 字符串\n\t        selector = selector.replace('/\\n/mg', '').trim();\n\t        if (selector.indexOf('<') === 0) {\n\t            // 如 <div>\n\t            selectorResult = createElemByHTML(selector);\n\t        } else {\n\t            // 如 #id .class\n\t            selectorResult = querySelectorAll(selector);\n\t        }\n\t    }\n\t\n\t    var length = selectorResult.length;\n\t    if (!length) {\n\t        // 空数组\n\t        return this;\n\t    }\n\t\n\t    // 加入 DOM 节点\n\t    var i = void 0;\n\t    for (i = 0; i < length; i++) {\n\t        this[i] = selectorResult[i];\n\t    }\n\t    this.length = length;\n\t}\n\t\n\t// 修改原型\n\tDomElement.prototype = {\n\t    constructor: DomElement,\n\t\n\t    // 类数组，forEach\n\t    forEach: function forEach(fn) {\n\t        var i = void 0;\n\t        for (i = 0; i < this.length; i++) {\n\t            var elem = this[i];\n\t            var result = fn.call(elem, elem, i);\n\t            if (result === false) {\n\t                break;\n\t            }\n\t        }\n\t        return this;\n\t    },\n\t\n\t    // 获取第几个元素\n\t    get: function get(index) {\n\t        var length = this.length;\n\t        if (index >= length) {\n\t            index = index % length;\n\t        }\n\t        return $(this[index]);\n\t    },\n\t\n\t    // 第一个\n\t    first: function first() {\n\t        return this.get(0);\n\t    },\n\t\n\t    // 最后一个\n\t    last: function last() {\n\t        var length = this.length;\n\t        return this.get(length - 1);\n\t    },\n\t\n\t    // 绑定事件\n\t    on: function on(type, selector, fn) {\n\t        // selector 不为空，证明绑定事件要加代理\n\t        if (!fn) {\n\t            fn = selector;\n\t            selector = null;\n\t        }\n\t\n\t        // type 是否有多个\n\t        var types = [];\n\t        types = type.split(/\\s+/);\n\t\n\t        return this.forEach(function (elem) {\n\t            types.forEach(function (type) {\n\t                if (!type) {\n\t                    return;\n\t                }\n\t\n\t                if (!selector) {\n\t                    // 无代理\n\t                    elem.addEventListener(type, fn, false);\n\t                    return;\n\t                }\n\t\n\t                // 有代理\n\t                elem.addEventListener(type, function (e) {\n\t                    var target = e.target;\n\t                    if (target.matches(selector)) {\n\t                        fn.call(target, e);\n\t                    }\n\t                }, false);\n\t            });\n\t        });\n\t    },\n\t\n\t    // 取消事件绑定\n\t    off: function off(type, fn) {\n\t        return this.forEach(function (elem) {\n\t            elem.removeEventListener(type, fn, false);\n\t        });\n\t    },\n\t\n\t    // 获取/设置 属性\n\t    attr: function attr(key, val) {\n\t        if (val == null) {\n\t            // 获取值\n\t            return this[0].getAttribute(key);\n\t        } else {\n\t            // 设置值\n\t            return this.forEach(function (elem) {\n\t                elem.setAttribute(key, val);\n\t            });\n\t        }\n\t    },\n\t\n\t    // 添加 class\n\t    addClass: function addClass(className) {\n\t        if (!className) {\n\t            return this;\n\t        }\n\t        return this.forEach(function (elem) {\n\t            var arr = void 0;\n\t            if (elem.className) {\n\t                // 解析当前 className 转换为数组\n\t                arr = elem.className.split(/\\s/);\n\t                arr = arr.filter(function (item) {\n\t                    return !!item.trim();\n\t                });\n\t                // 添加 class\n\t                if (arr.indexOf(className) < 0) {\n\t                    arr.push(className);\n\t                }\n\t                // 修改 elem.class\n\t                elem.className = arr.join(' ');\n\t            } else {\n\t                elem.className = className;\n\t            }\n\t        });\n\t    },\n\t\n\t    // 删除 class\n\t    removeClass: function removeClass(className) {\n\t        if (!className) {\n\t            return this;\n\t        }\n\t        return this.forEach(function (elem) {\n\t            var arr = void 0;\n\t            if (elem.className) {\n\t                // 解析当前 className 转换为数组\n\t                arr = elem.className.split(/\\s/);\n\t                arr = arr.filter(function (item) {\n\t                    item = item.trim();\n\t                    // 删除 class\n\t                    if (!item || item === className) {\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t                // 修改 elem.class\n\t                elem.className = arr.join(' ');\n\t            }\n\t        });\n\t    },\n\t\n\t    // 修改 css\n\t    css: function css(key, val) {\n\t        var currentStyle = key + ':' + val + ';';\n\t        return this.forEach(function (elem) {\n\t            var style = (elem.getAttribute('style') || '').trim();\n\t            var styleArr = void 0,\n\t                resultArr = [];\n\t            if (style) {\n\t                // 将 style 按照 ; 拆分为数组\n\t                styleArr = style.split(';');\n\t                styleArr.forEach(function (item) {\n\t                    // 对每项样式，按照 : 拆分为 key 和 value\n\t                    var arr = item.split(':').map(function (i) {\n\t                        return i.trim();\n\t                    });\n\t                    if (arr.length === 2) {\n\t                        resultArr.push(arr[0] + ':' + arr[1]);\n\t                    }\n\t                });\n\t                // 替换或者新增\n\t                resultArr = resultArr.map(function (item) {\n\t                    if (item.indexOf(key) === 0) {\n\t                        return currentStyle;\n\t                    } else {\n\t                        return item;\n\t                    }\n\t                });\n\t                if (resultArr.indexOf(currentStyle) < 0) {\n\t                    resultArr.push(currentStyle);\n\t                }\n\t                // 结果\n\t                elem.setAttribute('style', resultArr.join('; '));\n\t            } else {\n\t                // style 无值\n\t                elem.setAttribute('style', currentStyle);\n\t            }\n\t        });\n\t    },\n\t\n\t    // 显示\n\t    show: function show() {\n\t        return this.css('display', 'block');\n\t    },\n\t\n\t    // 隐藏\n\t    hide: function hide() {\n\t        return this.css('display', 'none');\n\t    },\n\t\n\t    // 获取子节点\n\t    children: function children() {\n\t        var elem = this[0];\n\t        if (!elem) {\n\t            return null;\n\t        }\n\t\n\t        return $(elem.children);\n\t    },\n\t\n\t    // 增加子节点\n\t    append: function append($children) {\n\t        return this.forEach(function (elem) {\n\t            $children.forEach(function (child) {\n\t                elem.appendChild(child);\n\t            });\n\t        });\n\t    },\n\t\n\t    // 移除当前节点\n\t    remove: function remove() {\n\t        return this.forEach(function (elem) {\n\t            if (elem.remove) {\n\t                elem.remove();\n\t            } else {\n\t                var parent = elem.parentElement;\n\t                parent && parent.removeChild(elem);\n\t            }\n\t        });\n\t    },\n\t\n\t    // 是否包含某个子节点\n\t    isContain: function isContain($child) {\n\t        var elem = this[0];\n\t        var child = $child[0];\n\t        return elem.contains(child);\n\t    },\n\t\n\t    // 尺寸数据\n\t    getSizeData: function getSizeData() {\n\t        var elem = this[0];\n\t        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n\t    },\n\t\n\t    // 封装 nodeName\n\t    getNodeName: function getNodeName() {\n\t        var elem = this[0];\n\t        return elem.nodeName;\n\t    },\n\t\n\t    // 从当前元素查找\n\t    find: function find(selector) {\n\t        var elem = this[0];\n\t        return $(elem.querySelectorAll(selector));\n\t    },\n\t\n\t    // 获取当前元素的 text\n\t    text: function text(val) {\n\t        if (!val) {\n\t            // 获取 text\n\t            var elem = this[0];\n\t            return elem.innerHTML.replace(/<.*?>/g, function () {\n\t                return '';\n\t            });\n\t        } else {\n\t            // 设置 text\n\t            return this.forEach(function (elem) {\n\t                elem.innerHTML = val;\n\t            });\n\t        }\n\t    },\n\t\n\t    // 获取 html\n\t    html: function html(value) {\n\t        var elem = this[0];\n\t        if (value == null) {\n\t            return elem.innerHTML;\n\t        } else {\n\t            elem.innerHTML = value;\n\t            return this;\n\t        }\n\t    },\n\t\n\t    // 获取 value\n\t    val: function val() {\n\t        var elem = this[0];\n\t        return elem.value.trim();\n\t    },\n\t\n\t    // focus\n\t    focus: function focus() {\n\t        return this.forEach(function (elem) {\n\t            elem.focus();\n\t        });\n\t    },\n\t\n\t    // parent\n\t    parent: function parent() {\n\t        var elem = this[0];\n\t        return $(elem.parentElement);\n\t    },\n\t\n\t    // parentUntil 找到符合 selector 的父节点\n\t    parentUntil: function parentUntil(selector, _currentElem) {\n\t        var results = document.querySelectorAll(selector);\n\t        var length = results.length;\n\t        if (!length) {\n\t            // 传入的 selector 无效\n\t            return null;\n\t        }\n\t\n\t        var elem = _currentElem || this[0];\n\t        if (elem.nodeName === 'BODY') {\n\t            return null;\n\t        }\n\t\n\t        var parent = elem.parentElement;\n\t        var i = void 0;\n\t        for (i = 0; i < length; i++) {\n\t            if (parent === results[i]) {\n\t                // 找到，并返回\n\t                return $(parent);\n\t            }\n\t        }\n\t\n\t        // 继续查找\n\t        return this.parentUntil(selector, parent);\n\t    },\n\t\n\t    // 判断两个 elem 是否相等\n\t    equal: function equal($elem) {\n\t        if ($elem.nodeType === 1) {\n\t            return this[0] === $elem;\n\t        } else {\n\t            return this[0] === $elem[0];\n\t        }\n\t    },\n\t\n\t    // 将该元素插入到某个元素前面\n\t    insertBefore: function insertBefore(selector) {\n\t        var $referenceNode = $(selector);\n\t        var referenceNode = $referenceNode[0];\n\t        if (!referenceNode) {\n\t            return this;\n\t        }\n\t        return this.forEach(function (elem) {\n\t            var parent = referenceNode.parentNode;\n\t            parent.insertBefore(elem, referenceNode);\n\t        });\n\t    },\n\t\n\t    // 将该元素插入到某个元素后面\n\t    insertAfter: function insertAfter(selector) {\n\t        var $referenceNode = $(selector);\n\t        var referenceNode = $referenceNode[0];\n\t        if (!referenceNode) {\n\t            return this;\n\t        }\n\t        return this.forEach(function (elem) {\n\t            var parent = referenceNode.parentNode;\n\t            if (parent.lastChild === referenceNode) {\n\t                // 最后一个元素\n\t                parent.appendChild(elem);\n\t            } else {\n\t                // 不是最后一个元素\n\t                parent.insertBefore(elem, referenceNode.nextSibling);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\t// new 一个对象\n\tfunction $(selector) {\n\t    return new DomElement(selector);\n\t}\n\t\n\t/*\n\t    配置信息\n\t*/\n\t\n\tvar config = {\n\t\n\t    // 默认菜单配置\n\t    menus: ['head', 'bold', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\t\n\t    // // 语言配置\n\t    // lang: {\n\t    //     '设置标题': 'title',\n\t    //     '正文': 'p',\n\t    //     '链接文字': 'link text',\n\t    //     '链接': 'link',\n\t    //     '插入': 'insert',\n\t    //     '创建': 'init'\n\t    // },\n\t\n\t    // 编辑区域的 z-index\n\t    zIndex: 10000,\n\t\n\t    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n\t    debug: false,\n\t\n\t    // 粘贴过滤样式，默认开启\n\t    pasteFilterStyle: true,\n\t\n\t    // onchange 事件\n\t    // onchange: function (html) {\n\t    //     // html 即变化之后的内容\n\t    //     console.log(html)\n\t    // },\n\t\n\t    // 是否显示添加网络图片的 tab\n\t    showLinkImg: true,\n\t\n\t    // 默认上传图片 max size: 5M\n\t    uploadImgMaxSize: 5 * 1024 * 1024,\n\t\n\t    // 配置一次最多上传几个图片\n\t    // uploadImgMaxLength: 5,\n\t\n\t    // 上传图片，是否显示 base64 格式\n\t    uploadImgShowBase64: false,\n\t\n\t    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n\t    // uploadImgServer: '/upload',\n\t\n\t    // 自定义配置 filename\n\t    uploadFileName: '',\n\t\n\t    // 上传图片的自定义参数\n\t    uploadImgParams: {\n\t        token: 'abcdef12345'\n\t    },\n\t\n\t    // 上传图片的自定义header\n\t    uploadImgHeaders: {\n\t        // 'Accept': 'text/x-json'\n\t    },\n\t\n\t    // 配置 XHR withCredentials\n\t    withCredentials: false,\n\t\n\t    // 自定义上传图片超时时间 ms\n\t    uploadImgTimeout: 5000,\n\t\n\t    // 上传图片 hook \n\t    uploadImgHooks: {\n\t        // customInsert: function (insertLinkImg, result, editor) {\n\t        //     console.log('customInsert')\n\t        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n\t        //     const data = result.data1 || []\n\t        //     data.forEach(link => {\n\t        //         insertLinkImg(link)\n\t        //     })\n\t        // },\n\t        before: function before(xhr, editor, files) {\n\t            // 图片上传之前触发\n\t\n\t            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n\t            // return {\n\t            //     prevent: true,\n\t            //     msg: '放弃上传'\n\t            // }\n\t        },\n\t        success: function success(xhr, editor, result) {\n\t            // 图片上传并返回结果，图片插入成功之后触发\n\t        },\n\t        fail: function fail(xhr, editor, result) {\n\t            // 图片上传并返回结果，但图片插入错误时触发\n\t        },\n\t        error: function error(xhr, editor) {\n\t            // 图片上传出错时触发\n\t        },\n\t        timeout: function timeout(xhr, editor) {\n\t            // 图片上传超时时触发\n\t        }\n\t    }\n\t\n\t};\n\t\n\t/*\n\t    工具\n\t*/\n\t\n\t// 和 UA 相关的属性\n\tvar UA = {\n\t    _ua: navigator.userAgent,\n\t\n\t    // 是否 webkit\n\t    isWebkit: function isWebkit() {\n\t        var reg = /webkit/i;\n\t        return reg.test(this._ua);\n\t    },\n\t\n\t    // 是否 IE\n\t    isIE: function isIE() {\n\t        return 'ActiveXObject' in window;\n\t    }\n\t};\n\t\n\t// 遍历对象\n\tfunction objForEach(obj, fn) {\n\t    var key = void 0,\n\t        result = void 0;\n\t    for (key in obj) {\n\t        if (obj.hasOwnProperty(key)) {\n\t            result = fn.call(obj, key, obj[key]);\n\t            if (result === false) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\t// 遍历类数组\n\tfunction arrForEach(fakeArr, fn) {\n\t    var i = void 0,\n\t        item = void 0,\n\t        result = void 0;\n\t    var length = fakeArr.length || 0;\n\t    for (i = 0; i < length; i++) {\n\t        item = fakeArr[i];\n\t        result = fn.call(fakeArr, item, i);\n\t        if (result === false) {\n\t            break;\n\t        }\n\t    }\n\t}\n\t\n\t// 获取随机数\n\tfunction getRandom(prefix) {\n\t    return prefix + Math.random().toString().slice(2);\n\t}\n\t\n\t// 替换 html 特殊字符\n\tfunction replaceHtmlSymbol(html) {\n\t    if (html == null) {\n\t        return '';\n\t    }\n\t    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;');\n\t}\n\t\n\t// 返回百分比的格式\n\t\n\t/*\n\t    bold-menu\n\t*/\n\t// 构造函数\n\tfunction Bold(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tBold.prototype = {\n\t    constructor: Bold,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\t\n\t        if (isSeleEmpty) {\n\t            // 选区是空的，插入并选中一个“空白”\n\t            editor.selection.createEmptyRange();\n\t        }\n\t\n\t        // 执行 bold 命令\n\t        editor.cmd.do('bold');\n\t\n\t        if (isSeleEmpty) {\n\t            // 需要将选取折叠起来\n\t            editor.selection.collapseRange();\n\t            editor.selection.restoreSelection();\n\t        }\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor.cmd.queryCommandState('bold')) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    替换多语言\n\t */\n\t\n\tvar replaceLang = function (editor, str) {\n\t    var langArgs = editor.config.langArgs || [];\n\t    var result = str;\n\t\n\t    langArgs.forEach(function (item) {\n\t        var reg = item.reg;\n\t        var val = item.val;\n\t\n\t        if (reg.test(result)) {\n\t            result = result.replace(reg, function () {\n\t                return val;\n\t            });\n\t        }\n\t    });\n\t\n\t    return result;\n\t};\n\t\n\t/*\n\t    droplist\n\t*/\n\tvar _emptyFn = function _emptyFn() {};\n\t\n\t// 构造函数\n\tfunction DropList(menu, opt) {\n\t    var _this = this;\n\t\n\t    // droplist 所依附的菜单\n\t    var editor = menu.editor;\n\t    this.menu = menu;\n\t    this.opt = opt;\n\t    // 容器\n\t    var $container = $('<div class=\"w-e-droplist\"></div>');\n\t\n\t    // 标题\n\t    var $title = opt.$title;\n\t    var titleHtml = void 0;\n\t    if ($title) {\n\t        // 替换多语言\n\t        titleHtml = $title.html();\n\t        titleHtml = replaceLang(editor, titleHtml);\n\t        $title.html(titleHtml);\n\t\n\t        $title.addClass('w-e-dp-title');\n\t        $container.append($title);\n\t    }\n\t\n\t    var list = opt.list || [];\n\t    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n\t    var onClick = opt.onClick || _emptyFn;\n\t\n\t    // 加入 DOM 并绑定事件\n\t    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n\t    $container.append($list);\n\t    list.forEach(function (item) {\n\t        var $elem = item.$elem;\n\t\n\t        // 替换多语言\n\t        var elemHtml = $elem.html();\n\t        elemHtml = replaceLang(editor, elemHtml);\n\t        $elem.html(elemHtml);\n\t\n\t        var value = item.value;\n\t        var $li = $('<li class=\"w-e-item\"></li>');\n\t        if ($elem) {\n\t            $li.append($elem);\n\t            $list.append($li);\n\t            $elem.on('click', function (e) {\n\t                onClick(value);\n\t\n\t                // 隐藏\n\t                _this.hideTimeoutId = setTimeout(function () {\n\t                    _this.hide();\n\t                }, 0);\n\t            });\n\t        }\n\t    });\n\t\n\t    // 绑定隐藏事件\n\t    $container.on('mouseleave', function (e) {\n\t        _this.hideTimeoutId = setTimeout(function () {\n\t            _this.hide();\n\t        }, 0);\n\t    });\n\t\n\t    // 记录属性\n\t    this.$container = $container;\n\t\n\t    // 基本属性\n\t    this._rendered = false;\n\t    this._show = false;\n\t}\n\t\n\t// 原型\n\tDropList.prototype = {\n\t    constructor: DropList,\n\t\n\t    // 显示（插入DOM）\n\t    show: function show() {\n\t        if (this.hideTimeoutId) {\n\t            // 清除之前的定时隐藏\n\t            clearTimeout(this.hideTimeoutId);\n\t        }\n\t\n\t        var menu = this.menu;\n\t        var $menuELem = menu.$elem;\n\t        var $container = this.$container;\n\t        if (this._show) {\n\t            return;\n\t        }\n\t        if (this._rendered) {\n\t            // 显示\n\t            $container.show();\n\t        } else {\n\t            // 加入 DOM 之前先定位位置\n\t            var menuHeight = $menuELem.getSizeData().height || 0;\n\t            var width = this.opt.width || 100; // 默认为 100\n\t            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\t\n\t            // 加入到 DOM\n\t            $menuELem.append($container);\n\t            this._rendered = true;\n\t        }\n\t\n\t        // 修改属性\n\t        this._show = true;\n\t    },\n\t\n\t    // 隐藏（移除DOM）\n\t    hide: function hide() {\n\t        if (this.showTimeoutId) {\n\t            // 清除之前的定时显示\n\t            clearTimeout(this.showTimeoutId);\n\t        }\n\t\n\t        var $container = this.$container;\n\t        if (!this._show) {\n\t            return;\n\t        }\n\t        // 隐藏并需改属性\n\t        $container.hide();\n\t        this._show = false;\n\t    }\n\t};\n\t\n\t/*\n\t    menu - header\n\t*/\n\t// 构造函数\n\tfunction Head(editor) {\n\t    var _this = this;\n\t\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"><i/></div>');\n\t    this.type = 'droplist';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t\n\t    // 初始化 droplist\n\t    this.droplist = new DropList(this, {\n\t        width: 100,\n\t        $title: $('<p>设置标题</p>'),\n\t        type: 'list', // droplist 以列表形式展示\n\t        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n\t        onClick: function onClick(value) {\n\t            // 注意 this 是指向当前的 Head 对象\n\t            _this._command(value);\n\t        }\n\t    });\n\t}\n\t\n\t// 原型\n\tHead.prototype = {\n\t    constructor: Head,\n\t\n\t    // 执行命令\n\t    _command: function _command(value) {\n\t        var editor = this.editor;\n\t\n\t        var $selectionElem = editor.selection.getSelectionContainerElem();\n\t        if (editor.$textElem.equal($selectionElem)) {\n\t            // 不能选中多行来设置标题，否则会出现问题\n\t            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n\t            return;\n\t        }\n\t\n\t        editor.cmd.do('formatBlock', value);\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        var reg = /^h/i;\n\t        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n\t        if (reg.test(cmdValue)) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    panel\n\t*/\n\t\n\tvar emptyFn = function emptyFn() {};\n\t\n\t// 记录已经显示 panel 的菜单\n\tvar _isCreatedPanelMenus = [];\n\t\n\t// 构造函数\n\tfunction Panel(menu, opt) {\n\t    this.menu = menu;\n\t    this.opt = opt;\n\t}\n\t\n\t// 原型\n\tPanel.prototype = {\n\t    constructor: Panel,\n\t\n\t    // 显示（插入DOM）\n\t    show: function show() {\n\t        var _this = this;\n\t\n\t        var menu = this.menu;\n\t        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n\t            // 该菜单已经创建了 panel 不能再创建\n\t            return;\n\t        }\n\t\n\t        var editor = menu.editor;\n\t        var $body = $('body');\n\t        var $textContainerElem = editor.$textContainerElem;\n\t        var opt = this.opt;\n\t\n\t        // panel 的容器\n\t        var $container = $('<div class=\"w-e-panel-container\"></div>');\n\t        var width = opt.width || 300; // 默认 300px\n\t        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\t\n\t        // 添加关闭按钮\n\t        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n\t        $container.append($closeBtn);\n\t        $closeBtn.on('click', function () {\n\t            _this.hide();\n\t        });\n\t\n\t        // 准备 tabs 容器\n\t        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n\t        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n\t        $container.append($tabTitleContainer).append($tabContentContainer);\n\t\n\t        // 设置高度\n\t        var height = opt.height;\n\t        if (height) {\n\t            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n\t        }\n\t\n\t        // tabs\n\t        var tabs = opt.tabs || [];\n\t        var tabTitleArr = [];\n\t        var tabContentArr = [];\n\t        tabs.forEach(function (tab, tabIndex) {\n\t            if (!tab) {\n\t                return;\n\t            }\n\t            var title = tab.title || '';\n\t            var tpl = tab.tpl || '';\n\t\n\t            // 替换多语言\n\t            title = replaceLang(editor, title);\n\t            tpl = replaceLang(editor, tpl);\n\t\n\t            // 添加到 DOM\n\t            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n\t            $tabTitleContainer.append($title);\n\t            var $content = $(tpl);\n\t            $tabContentContainer.append($content);\n\t\n\t            // 记录到内存\n\t            $title._index = tabIndex;\n\t            tabTitleArr.push($title);\n\t            tabContentArr.push($content);\n\t\n\t            // 设置 active 项\n\t            if (tabIndex === 0) {\n\t                $title._active = true;\n\t                $title.addClass('w-e-active');\n\t            } else {\n\t                $content.hide();\n\t            }\n\t\n\t            // 绑定 tab 的事件\n\t            $title.on('click', function (e) {\n\t                if ($title._active) {\n\t                    return;\n\t                }\n\t                // 隐藏所有的 tab\n\t                tabTitleArr.forEach(function ($title) {\n\t                    $title._active = false;\n\t                    $title.removeClass('w-e-active');\n\t                });\n\t                tabContentArr.forEach(function ($content) {\n\t                    $content.hide();\n\t                });\n\t\n\t                // 显示当前的 tab\n\t                $title._active = true;\n\t                $title.addClass('w-e-active');\n\t                $content.show();\n\t            });\n\t        });\n\t\n\t        // 绑定关闭事件\n\t        $container.on('click', function (e) {\n\t            // 点击时阻止冒泡\n\t            e.stopPropagation();\n\t        });\n\t        $body.on('click', function (e) {\n\t            _this.hide();\n\t        });\n\t\n\t        // 添加到 DOM\n\t        $textContainerElem.append($container);\n\t\n\t        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n\t        tabs.forEach(function (tab, index) {\n\t            if (!tab) {\n\t                return;\n\t            }\n\t            var events = tab.events || [];\n\t            events.forEach(function (event) {\n\t                var selector = event.selector;\n\t                var type = event.type;\n\t                var fn = event.fn || emptyFn;\n\t                var $content = tabContentArr[index];\n\t                $content.find(selector).on(type, function (e) {\n\t                    e.stopPropagation();\n\t                    var needToHide = fn(e);\n\t                    // 执行完事件之后，是否要关闭 panel\n\t                    if (needToHide) {\n\t                        _this.hide();\n\t                    }\n\t                });\n\t            });\n\t        });\n\t\n\t        // focus 第一个 elem\n\t        var $inputs = $container.find('input[type=text],textarea');\n\t        if ($inputs.length) {\n\t            $inputs.get(0).focus();\n\t        }\n\t\n\t        // 添加到属性\n\t        this.$container = $container;\n\t\n\t        // 隐藏其他 panel\n\t        this._hideOtherPanels();\n\t        // 记录该 menu 已经创建了 panel\n\t        _isCreatedPanelMenus.push(menu);\n\t    },\n\t\n\t    // 隐藏（移除DOM）\n\t    hide: function hide() {\n\t        var menu = this.menu;\n\t        var $container = this.$container;\n\t        if ($container) {\n\t            $container.remove();\n\t        }\n\t\n\t        // 将该 menu 记录中移除\n\t        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n\t            if (item === menu) {\n\t                return false;\n\t            } else {\n\t                return true;\n\t            }\n\t        });\n\t    },\n\t\n\t    // 一个 panel 展示时，隐藏其他 panel\n\t    _hideOtherPanels: function _hideOtherPanels() {\n\t        if (!_isCreatedPanelMenus.length) {\n\t            return;\n\t        }\n\t        _isCreatedPanelMenus.forEach(function (menu) {\n\t            var panel = menu.panel || {};\n\t            if (panel.hide) {\n\t                panel.hide();\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\t/*\n\t    menu - link\n\t*/\n\t// 构造函数\n\tfunction Link(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"><i/></div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tLink.prototype = {\n\t    constructor: Link,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        var editor = this.editor;\n\t        var $linkelem = void 0;\n\t\n\t        if (this._active) {\n\t            // 当前选区在链接里面\n\t            $linkelem = editor.selection.getSelectionContainerElem();\n\t            if (!$linkelem) {\n\t                return;\n\t            }\n\t            // 将该元素都包含在选取之内，以便后面整体替换\n\t            editor.selection.createRangeByElem($linkelem);\n\t            editor.selection.restoreSelection();\n\t            // 显示 panel\n\t            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n\t        } else {\n\t            // 当前选区不在链接里面\n\t            if (editor.selection.isSelectionEmpty()) {\n\t                // 选区是空的，未选中内容\n\t                this._createPanel('', '');\n\t            } else {\n\t                // 选中内容了\n\t                this._createPanel(editor.selection.getSelectionText(), '');\n\t            }\n\t        }\n\t    },\n\t\n\t    // 创建 panel\n\t    _createPanel: function _createPanel(text, link) {\n\t        var _this = this;\n\t\n\t        // panel 中需要用到的id\n\t        var inputLinkId = getRandom('input-link');\n\t        var inputTextId = getRandom('input-text');\n\t        var btnOkId = getRandom('btn-ok');\n\t        var btnDelId = getRandom('btn-del');\n\t\n\t        // 是否显示“删除链接”\n\t        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\t\n\t        // 初始化并显示 panel\n\t        var panel = new Panel(this, {\n\t            width: 300,\n\t            // panel 中可包含多个 tab\n\t            tabs: [{\n\t                // tab 的标题\n\t                title: '链接',\n\t                // 模板\n\t                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n\t                // 事件绑定\n\t                events: [\n\t                // 插入链接\n\t                {\n\t                    selector: '#' + btnOkId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        // 执行插入链接\n\t                        var $link = $('#' + inputLinkId);\n\t                        var $text = $('#' + inputTextId);\n\t                        var link = $link.val();\n\t                        var text = $text.val();\n\t                        _this._insertLink(text, link);\n\t\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                },\n\t                // 删除链接\n\t                {\n\t                    selector: '#' + btnDelId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        // 执行删除链接\n\t                        _this._delLink();\n\t\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            } // tab end\n\t            ] // tabs end\n\t        });\n\t\n\t        // 显示 panel\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 删除当前链接\n\t    _delLink: function _delLink() {\n\t        if (!this._active) {\n\t            return;\n\t        }\n\t        var editor = this.editor;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        var selectionText = editor.selection.getSelectionText();\n\t        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n\t    },\n\t\n\t    // 插入链接\n\t    _insertLink: function _insertLink(text, link) {\n\t        if (!text || !link) {\n\t            return;\n\t        }\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        if ($selectionELem.getNodeName() === 'A') {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    italic-menu\n\t*/\n\t// 构造函数\n\tfunction Italic(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tItalic.prototype = {\n\t    constructor: Italic,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\t\n\t        if (isSeleEmpty) {\n\t            // 选区是空的，插入并选中一个“空白”\n\t            editor.selection.createEmptyRange();\n\t        }\n\t\n\t        // 执行 italic 命令\n\t        editor.cmd.do('italic');\n\t\n\t        if (isSeleEmpty) {\n\t            // 需要将选取折叠起来\n\t            editor.selection.collapseRange();\n\t            editor.selection.restoreSelection();\n\t        }\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor.cmd.queryCommandState('italic')) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    redo-menu\n\t*/\n\t// 构造函数\n\tfunction Redo(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tRedo.prototype = {\n\t    constructor: Redo,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t\n\t        // 执行 redo 命令\n\t        editor.cmd.do('redo');\n\t    }\n\t};\n\t\n\t/*\n\t    strikeThrough-menu\n\t*/\n\t// 构造函数\n\tfunction StrikeThrough(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tStrikeThrough.prototype = {\n\t    constructor: StrikeThrough,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\t\n\t        if (isSeleEmpty) {\n\t            // 选区是空的，插入并选中一个“空白”\n\t            editor.selection.createEmptyRange();\n\t        }\n\t\n\t        // 执行 strikeThrough 命令\n\t        editor.cmd.do('strikeThrough');\n\t\n\t        if (isSeleEmpty) {\n\t            // 需要将选取折叠起来\n\t            editor.selection.collapseRange();\n\t            editor.selection.restoreSelection();\n\t        }\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor.cmd.queryCommandState('strikeThrough')) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    underline-menu\n\t*/\n\t// 构造函数\n\tfunction Underline(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tUnderline.prototype = {\n\t    constructor: Underline,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\t\n\t        if (isSeleEmpty) {\n\t            // 选区是空的，插入并选中一个“空白”\n\t            editor.selection.createEmptyRange();\n\t        }\n\t\n\t        // 执行 underline 命令\n\t        editor.cmd.do('underline');\n\t\n\t        if (isSeleEmpty) {\n\t            // 需要将选取折叠起来\n\t            editor.selection.collapseRange();\n\t            editor.selection.restoreSelection();\n\t        }\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor.cmd.queryCommandState('underline')) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    undo-menu\n\t*/\n\t// 构造函数\n\tfunction Undo(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tUndo.prototype = {\n\t    constructor: Undo,\n\t\n\t    // 点击事件\n\t    onClick: function onClick(e) {\n\t        // 点击菜单将触发这里\n\t\n\t        var editor = this.editor;\n\t\n\t        // 执行 undo 命令\n\t        editor.cmd.do('undo');\n\t    }\n\t};\n\t\n\t/*\n\t    menu - list\n\t*/\n\t// 构造函数\n\tfunction List(editor) {\n\t    var _this = this;\n\t\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"><i/></div>');\n\t    this.type = 'droplist';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t\n\t    // 初始化 droplist\n\t    this.droplist = new DropList(this, {\n\t        width: 120,\n\t        $title: $('<p>设置列表</p>'),\n\t        type: 'list', // droplist 以列表形式展示\n\t        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n\t        onClick: function onClick(value) {\n\t            // 注意 this 是指向当前的 List 对象\n\t            _this._command(value);\n\t        }\n\t    });\n\t}\n\t\n\t// 原型\n\tList.prototype = {\n\t    constructor: List,\n\t\n\t    // 执行命令\n\t    _command: function _command(value) {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        editor.selection.restoreSelection();\n\t        if (editor.cmd.queryCommandState(value)) {\n\t            return;\n\t        }\n\t        editor.cmd.do(value);\n\t\n\t        // 验证列表是否被包裹在 <p> 之内\n\t        var $selectionElem = editor.selection.getSelectionContainerElem();\n\t        if ($selectionElem.getNodeName() === 'LI') {\n\t            $selectionElem = $selectionElem.parent();\n\t        }\n\t        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n\t            return;\n\t        }\n\t        if ($selectionElem.equal($textElem)) {\n\t            // 证明是顶级标签，没有被 <p> 包裹\n\t            return;\n\t        }\n\t        var $parent = $selectionElem.parent();\n\t        if ($parent.equal($textElem)) {\n\t            // $parent 是顶级标签，不能删除\n\t            return;\n\t        }\n\t\n\t        $selectionElem.insertAfter($parent);\n\t        $parent.remove();\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    menu - justify\n\t*/\n\t// 构造函数\n\tfunction Justify(editor) {\n\t    var _this = this;\n\t\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"><i/></div>');\n\t    this.type = 'droplist';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t\n\t    // 初始化 droplist\n\t    this.droplist = new DropList(this, {\n\t        width: 100,\n\t        $title: $('<p>对齐方式</p>'),\n\t        type: 'list', // droplist 以列表形式展示\n\t        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n\t        onClick: function onClick(value) {\n\t            // 注意 this 是指向当前的 List 对象\n\t            _this._command(value);\n\t        }\n\t    });\n\t}\n\t\n\t// 原型\n\tJustify.prototype = {\n\t    constructor: Justify,\n\t\n\t    // 执行命令\n\t    _command: function _command(value) {\n\t        var editor = this.editor;\n\t        editor.cmd.do(value);\n\t    }\n\t};\n\t\n\t/*\n\t    menu - Forecolor\n\t*/\n\t// 构造函数\n\tfunction ForeColor(editor) {\n\t    var _this = this;\n\t\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"><i/></div>');\n\t    this.type = 'droplist';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t\n\t    // 初始化 droplist\n\t    this.droplist = new DropList(this, {\n\t        width: 120,\n\t        $title: $('<p>文字颜色</p>'),\n\t        type: 'inline-block', // droplist 内容以 block 形式展示\n\t        list: [{ $elem: $('<i style=\"color:#000000;\" class=\"w-e-icon-pencil2\"></i>'), value: '#000000' }, { $elem: $('<i style=\"color:#eeece0;\" class=\"w-e-icon-pencil2\"></i>'), value: '#eeece0' }, { $elem: $('<i style=\"color:#1c487f;\" class=\"w-e-icon-pencil2\"></i>'), value: '#1c487f' }, { $elem: $('<i style=\"color:#4d80bf;\" class=\"w-e-icon-pencil2\"></i>'), value: '#4d80bf' }, { $elem: $('<i style=\"color:#c24f4a;\" class=\"w-e-icon-pencil2\"></i>'), value: '#c24f4a' }, { $elem: $('<i style=\"color:#8baa4a;\" class=\"w-e-icon-pencil2\"></i>'), value: '#8baa4a' }, { $elem: $('<i style=\"color:#7b5ba1;\" class=\"w-e-icon-pencil2\"></i>'), value: '#7b5ba1' }, { $elem: $('<i style=\"color:#46acc8;\" class=\"w-e-icon-pencil2\"></i>'), value: '#46acc8' }, { $elem: $('<i style=\"color:#f9963b;\" class=\"w-e-icon-pencil2\"></i>'), value: '#f9963b' }, { $elem: $('<i style=\"color:#ffffff;\" class=\"w-e-icon-pencil2\"></i>'), value: '#ffffff' }],\n\t        onClick: function onClick(value) {\n\t            // 注意 this 是指向当前的 ForeColor 对象\n\t            _this._command(value);\n\t        }\n\t    });\n\t}\n\t\n\t// 原型\n\tForeColor.prototype = {\n\t    constructor: ForeColor,\n\t\n\t    // 执行命令\n\t    _command: function _command(value) {\n\t        var editor = this.editor;\n\t        editor.cmd.do('foreColor', value);\n\t    }\n\t};\n\t\n\t/*\n\t    menu - BackColor\n\t*/\n\t// 构造函数\n\tfunction BackColor(editor) {\n\t    var _this = this;\n\t\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"><i/></div>');\n\t    this.type = 'droplist';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t\n\t    // 初始化 droplist\n\t    this.droplist = new DropList(this, {\n\t        width: 120,\n\t        $title: $('<p>背景色</p>'),\n\t        type: 'inline-block', // droplist 内容以 block 形式展示\n\t        list: [{ $elem: $('<i style=\"color:#000000;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#000000' }, { $elem: $('<i style=\"color:#eeece0;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#eeece0' }, { $elem: $('<i style=\"color:#1c487f;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#1c487f' }, { $elem: $('<i style=\"color:#4d80bf;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#4d80bf' }, { $elem: $('<i style=\"color:#c24f4a;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#c24f4a' }, { $elem: $('<i style=\"color:#8baa4a;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#8baa4a' }, { $elem: $('<i style=\"color:#7b5ba1;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#7b5ba1' }, { $elem: $('<i style=\"color:#46acc8;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#46acc8' }, { $elem: $('<i style=\"color:#f9963b;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#f9963b' }, { $elem: $('<i style=\"color:#ffffff;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#ffffff' }],\n\t        onClick: function onClick(value) {\n\t            // 注意 this 是指向当前的 BackColor 对象\n\t            _this._command(value);\n\t        }\n\t    });\n\t}\n\t\n\t// 原型\n\tBackColor.prototype = {\n\t    constructor: BackColor,\n\t\n\t    // 执行命令\n\t    _command: function _command(value) {\n\t        var editor = this.editor;\n\t        editor.cmd.do('backColor', value);\n\t    }\n\t};\n\t\n\t/*\n\t    menu - quote\n\t*/\n\t// 构造函数\n\tfunction Quote(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"><i/>\\n        </div>');\n\t    this.type = 'click';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tQuote.prototype = {\n\t    constructor: Quote,\n\t\n\t    onClick: function onClick(e) {\n\t        var editor = this.editor;\n\t        if (!UA.isIE()) {\n\t            editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n\t            return;\n\t        }\n\t\n\t        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n\t\n\t        var $selectionElem = editor.selection.getSelectionContainerElem();\n\t        var content = void 0,\n\t            $targetELem = void 0;\n\t        if ($selectionElem.getNodeName() === 'P') {\n\t            // 将 P 转换为 quote\n\t            content = $selectionElem.text();\n\t            $targetELem = $('<blockquote>' + content + '</blockquote>');\n\t            $targetELem.insertAfter($selectionElem);\n\t            $selectionElem.remove();\n\t            return;\n\t        }\n\t        if ($selectionElem.getNodeName() === 'BLOCKQUOTE') {\n\t            // 撤销 quote\n\t            content = $selectionElem.text();\n\t            $targetELem = $('<p>' + content + '</p>');\n\t            $targetELem.insertAfter($selectionElem);\n\t            $selectionElem.remove();\n\t        }\n\t    },\n\t\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        var reg = /^BLOCKQUOTE$/i;\n\t        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n\t        if (reg.test(cmdValue)) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    menu - code\n\t*/\n\t// 构造函数\n\tfunction Code(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"><i/>\\n        </div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tCode.prototype = {\n\t    constructor: Code,\n\t\n\t    onClick: function onClick(e) {\n\t        var editor = this.editor;\n\t        var $startElem = editor.selection.getSelectionStartElem();\n\t        var $endElem = editor.selection.getSelectionEndElem();\n\t        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\t        var selectionText = editor.selection.getSelectionText();\n\t        var $code = void 0;\n\t\n\t        if (!$startElem.equal($endElem)) {\n\t            // 跨元素选择，不做处理\n\t            editor.selection.restoreSelection();\n\t            return;\n\t        }\n\t        if (!isSeleEmpty) {\n\t            // 选取不是空，用 <code> 包裹即可\n\t            $code = $('<code>' + selectionText + '</code>');\n\t            editor.cmd.do('insertElem', $code);\n\t            editor.selection.createRangeByElem($code, false);\n\t            editor.selection.restoreSelection();\n\t            return;\n\t        }\n\t\n\t        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n\t        if (this._active) {\n\t            // 选中状态，将编辑内容\n\t            this._createPanel($startElem.html());\n\t        } else {\n\t            // 未选中状态，将创建内容\n\t            this._createPanel();\n\t        }\n\t    },\n\t\n\t    _createPanel: function _createPanel(value) {\n\t        var _this = this;\n\t\n\t        // value - 要编辑的内容\n\t        value = value || '';\n\t        var type = !value ? 'new' : 'edit';\n\t        var textId = getRandom('texxt');\n\t        var btnId = getRandom('btn');\n\t\n\t        var panel = new Panel(this, {\n\t            width: 500,\n\t            // 一个 Panel 包含多个 tab\n\t            tabs: [{\n\t                // 标题\n\t                title: '插入代码',\n\t                // 模板\n\t                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n\t                // 事件绑定\n\t                events: [\n\t                // 插入代码\n\t                {\n\t                    selector: '#' + btnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        var $text = $('#' + textId);\n\t                        var text = $text.val() || $text.html();\n\t                        text = replaceHtmlSymbol(text);\n\t                        if (type === 'new') {\n\t                            // 新插入\n\t                            _this._insertCode(text);\n\t                        } else {\n\t                            // 编辑更新\n\t                            _this._updateCode(text);\n\t                        }\n\t\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            } // first tab end\n\t            ] // tabs end\n\t        }); // new Panel end\n\t\n\t        // 显示 panel\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 插入代码\n\t    _insertCode: function _insertCode(value) {\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n\t    },\n\t\n\t    // 更新代码\n\t    _updateCode: function _updateCode(value) {\n\t        var editor = this.editor;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        $selectionELem.html(value);\n\t        editor.selection.restoreSelection();\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        var $parentElem = $selectionELem.parent();\n\t        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    menu - emoticon\n\t*/\n\t// 构造函数\n\tfunction Emoticon(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"><i/>\\n        </div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tEmoticon.prototype = {\n\t    constructor: Emoticon,\n\t\n\t    onClick: function onClick() {\n\t        this._createPanel();\n\t    },\n\t\n\t    _createPanel: function _createPanel() {\n\t        var _this = this;\n\t\n\t        // 拼接表情字符串\n\t        var faceHtml = '';\n\t        var faceStr = '😀 😃 😄 😁 😆 😅 😂  😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😜 😝 😛 🤑 🤗 🤓 😎 😏 😒 😞 😔 😟 😕 🙁  😣 😖 😫 😩 😤 😠 😡 😶 😐 😑 😯 😦 😧 😮 😲 😵 😳 😱 😨 😰 😢 😥 😭 😓 😪 😴 🙄 🤔 😬 🤐';\n\t        faceStr.split(/\\s/).forEach(function (item) {\n\t            if (item) {\n\t                faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n\t            }\n\t        });\n\t\n\t        var handHtml = '';\n\t        var handStr = '🙌 👏 👋 👍 👎 👊 ✊ ️👌 ✋ 👐 💪 🙏 ️👆 👇 👈 👉 🖕 🖐 🤘 🖖';\n\t        handStr.split(/\\s/).forEach(function (item) {\n\t            if (item) {\n\t                handHtml += '<span class=\"w-e-item\">' + item + '</span>';\n\t            }\n\t        });\n\t\n\t        var panel = new Panel(this, {\n\t            width: 300,\n\t            height: 200,\n\t            // 一个 Panel 包含多个 tab\n\t            tabs: [{\n\t                // 标题\n\t                title: '表情',\n\t                // 模板\n\t                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n\t                // 事件绑定\n\t                events: [{\n\t                    selector: 'span.w-e-item',\n\t                    type: 'click',\n\t                    fn: function fn(e) {\n\t                        var target = e.target;\n\t                        _this._insert(target.innerHTML);\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            }, // first tab end\n\t            {\n\t                // 标题\n\t                title: '手势',\n\t                // 模板\n\t                tpl: '<div class=\"w-e-emoticon-container\">' + handHtml + '</div>',\n\t                // 事件绑定\n\t                events: [{\n\t                    selector: 'span.w-e-item',\n\t                    type: 'click',\n\t                    fn: function fn(e) {\n\t                        var target = e.target;\n\t                        _this._insert(target.innerHTML);\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            } // second tab end\n\t            ] // tabs end\n\t        });\n\t\n\t        // 显示 panel\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 插入表情\n\t    _insert: function _insert(emoji) {\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', '<span>' + emoji + '</span>');\n\t    }\n\t};\n\t\n\t/*\n\t    menu - table\n\t*/\n\t// 构造函数\n\tfunction Table(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"><i/></div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tTable.prototype = {\n\t    constructor: Table,\n\t\n\t    onClick: function onClick() {\n\t        if (this._active) {\n\t            // 编辑现有表格\n\t            this._createEditPanel();\n\t        } else {\n\t            // 插入新表格\n\t            this._createInsertPanel();\n\t        }\n\t    },\n\t\n\t    // 创建插入新表格的 panel\n\t    _createInsertPanel: function _createInsertPanel() {\n\t        var _this = this;\n\t\n\t        // 用到的 id\n\t        var btnInsertId = getRandom('btn');\n\t        var textRowNum = getRandom('row');\n\t        var textColNum = getRandom('col');\n\t\n\t        var panel = new Panel(this, {\n\t            width: 250,\n\t            // panel 包含多个 tab\n\t            tabs: [{\n\t                // 标题\n\t                title: '插入表格',\n\t                // 模板\n\t                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n\t                // 事件绑定\n\t                events: [{\n\t                    // 点击按钮，插入表格\n\t                    selector: '#' + btnInsertId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        var rowNum = parseInt($('#' + textRowNum).val());\n\t                        var colNum = parseInt($('#' + textColNum).val());\n\t\n\t                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n\t                            // form 数据有效\n\t                            _this._insert(rowNum, colNum);\n\t                        }\n\t\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            } // first tab end\n\t            ] // tabs end\n\t        }); // panel end\n\t\n\t        // 展示 panel\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 插入表格\n\t    _insert: function _insert(rowNum, colNum) {\n\t        // 拼接 table 模板\n\t        var r = void 0,\n\t            c = void 0;\n\t        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n\t        for (r = 0; r < rowNum; r++) {\n\t            html += '<tr>';\n\t            if (r === 0) {\n\t                for (c = 0; c < colNum; c++) {\n\t                    html += '<th>&nbsp;</th>';\n\t                }\n\t            } else {\n\t                for (c = 0; c < colNum; c++) {\n\t                    html += '<td>&nbsp;</td>';\n\t                }\n\t            }\n\t            html += '</tr>';\n\t        }\n\t        html += '</table><p><br></p>';\n\t\n\t        // 执行命令\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', html);\n\t\n\t        // 防止 firefox 下出现 resize 的控制点\n\t        editor.cmd.do('enableObjectResizing', false);\n\t        editor.cmd.do('enableInlineTableEditing', false);\n\t    },\n\t\n\t    // 创建编辑表格的 panel\n\t    _createEditPanel: function _createEditPanel() {\n\t        var _this2 = this;\n\t\n\t        // 可用的 id\n\t        var addRowBtnId = getRandom('add-row');\n\t        var addColBtnId = getRandom('add-col');\n\t        var delRowBtnId = getRandom('del-row');\n\t        var delColBtnId = getRandom('del-col');\n\t        var delTableBtnId = getRandom('del-table');\n\t\n\t        // 创建 panel 对象\n\t        var panel = new Panel(this, {\n\t            width: 320,\n\t            // panel 包含多个 tab\n\t            tabs: [{\n\t                // 标题\n\t                title: '编辑表格',\n\t                // 模板\n\t                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n\t                // 事件绑定\n\t                events: [{\n\t                    // 增加行\n\t                    selector: '#' + addRowBtnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        _this2._addRow();\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }, {\n\t                    // 增加列\n\t                    selector: '#' + addColBtnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        _this2._addCol();\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }, {\n\t                    // 删除行\n\t                    selector: '#' + delRowBtnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        _this2._delRow();\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }, {\n\t                    // 删除列\n\t                    selector: '#' + delColBtnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        _this2._delCol();\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }, {\n\t                    // 删除表格\n\t                    selector: '#' + delTableBtnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        _this2._delTable();\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            }]\n\t        });\n\t        // 显示 panel\n\t        panel.show();\n\t    },\n\t\n\t    // 获取选中的单元格的位置信息\n\t    _getLocationData: function _getLocationData() {\n\t        var result = {};\n\t        var editor = this.editor;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        var nodeName = $selectionELem.getNodeName();\n\t        if (nodeName !== 'TD' && nodeName !== 'TH') {\n\t            return;\n\t        }\n\t\n\t        // 获取 td index\n\t        var $tr = $selectionELem.parent();\n\t        var $tds = $tr.children();\n\t        var tdLength = $tds.length;\n\t        $tds.forEach(function (td, index) {\n\t            if (td === $selectionELem[0]) {\n\t                // 记录并跳出循环\n\t                result.td = {\n\t                    index: index,\n\t                    elem: td,\n\t                    length: tdLength\n\t                };\n\t                return false;\n\t            }\n\t        });\n\t\n\t        // 获取 tr index\n\t        var $tbody = $tr.parent();\n\t        var $trs = $tbody.children();\n\t        var trLength = $trs.length;\n\t        $trs.forEach(function (tr, index) {\n\t            if (tr === $tr[0]) {\n\t                // 记录并跳出循环\n\t                result.tr = {\n\t                    index: index,\n\t                    elem: tr,\n\t                    length: trLength\n\t                };\n\t                return false;\n\t            }\n\t        });\n\t\n\t        // 返回结果\n\t        return result;\n\t    },\n\t\n\t    // 增加行\n\t    _addRow: function _addRow() {\n\t        // 获取当前单元格的位置信息\n\t        var locationData = this._getLocationData();\n\t        if (!locationData) {\n\t            return;\n\t        }\n\t        var trData = locationData.tr;\n\t        var $currentTr = $(trData.elem);\n\t        var tdData = locationData.td;\n\t        var tdLength = tdData.length;\n\t\n\t        // 拼接即将插入的字符串\n\t        var newTr = document.createElement('tr');\n\t        var tpl = '',\n\t            i = void 0;\n\t        for (i = 0; i < tdLength; i++) {\n\t            tpl += '<td>&nbsp;</td>';\n\t        }\n\t        newTr.innerHTML = tpl;\n\t        // 插入\n\t        $(newTr).insertAfter($currentTr);\n\t    },\n\t\n\t    // 增加列\n\t    _addCol: function _addCol() {\n\t        // 获取当前单元格的位置信息\n\t        var locationData = this._getLocationData();\n\t        if (!locationData) {\n\t            return;\n\t        }\n\t        var trData = locationData.tr;\n\t        var tdData = locationData.td;\n\t        var tdIndex = tdData.index;\n\t        var $currentTr = $(trData.elem);\n\t        var $trParent = $currentTr.parent();\n\t        var $trs = $trParent.children();\n\t\n\t        // 遍历所有行\n\t        $trs.forEach(function (tr) {\n\t            var $tr = $(tr);\n\t            var $tds = $tr.children();\n\t            var $currentTd = $tds.get(tdIndex);\n\t            var name = $currentTd.getNodeName().toLowerCase();\n\t\n\t            // new 一个 td，并插入\n\t            var newTd = document.createElement(name);\n\t            $(newTd).insertAfter($currentTd);\n\t        });\n\t    },\n\t\n\t    // 删除行\n\t    _delRow: function _delRow() {\n\t        // 获取当前单元格的位置信息\n\t        var locationData = this._getLocationData();\n\t        if (!locationData) {\n\t            return;\n\t        }\n\t        var trData = locationData.tr;\n\t        var $currentTr = $(trData.elem);\n\t        $currentTr.remove();\n\t    },\n\t\n\t    // 删除列\n\t    _delCol: function _delCol() {\n\t        // 获取当前单元格的位置信息\n\t        var locationData = this._getLocationData();\n\t        if (!locationData) {\n\t            return;\n\t        }\n\t        var trData = locationData.tr;\n\t        var tdData = locationData.td;\n\t        var tdIndex = tdData.index;\n\t        var $currentTr = $(trData.elem);\n\t        var $trParent = $currentTr.parent();\n\t        var $trs = $trParent.children();\n\t\n\t        // 遍历所有行\n\t        $trs.forEach(function (tr) {\n\t            var $tr = $(tr);\n\t            var $tds = $tr.children();\n\t            var $currentTd = $tds.get(tdIndex);\n\t            // 删除\n\t            $currentTd.remove();\n\t        });\n\t    },\n\t\n\t    // 删除表格\n\t    _delTable: function _delTable() {\n\t        var editor = this.editor;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        var $table = $selectionELem.parentUntil('table');\n\t        if (!$table) {\n\t            return;\n\t        }\n\t        $table.remove();\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        var $selectionELem = editor.selection.getSelectionContainerElem();\n\t        if (!$selectionELem) {\n\t            return;\n\t        }\n\t        var nodeName = $selectionELem.getNodeName();\n\t        if (nodeName === 'TD' || nodeName === 'TH') {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    menu - video\n\t*/\n\t// 构造函数\n\tfunction Video(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"><i/></div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tVideo.prototype = {\n\t    constructor: Video,\n\t\n\t    onClick: function onClick() {\n\t        this._createPanel();\n\t    },\n\t\n\t    _createPanel: function _createPanel() {\n\t        var _this = this;\n\t\n\t        // 创建 id\n\t        var textValId = getRandom('text-val');\n\t        var btnId = getRandom('btn');\n\t\n\t        // 创建 panel\n\t        var panel = new Panel(this, {\n\t            width: 350,\n\t            // 一个 panel 多个 tab\n\t            tabs: [{\n\t                // 标题\n\t                title: '插入视频',\n\t                // 模板\n\t                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n\t                // 事件绑定\n\t                events: [{\n\t                    selector: '#' + btnId,\n\t                    type: 'click',\n\t                    fn: function fn() {\n\t                        var $text = $('#' + textValId);\n\t                        var val = $text.val().trim();\n\t\n\t                        // 测试用视频地址\n\t                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\t\n\t                        if (val) {\n\t                            // 插入视频\n\t                            _this._insert(val);\n\t                        }\n\t\n\t                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                        return true;\n\t                    }\n\t                }]\n\t            } // first tab end\n\t            ] // tabs end\n\t        }); // panel end\n\t\n\t        // 显示 panel\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 插入视频\n\t    _insert: function _insert(val) {\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', val + '<p><br></p>');\n\t    }\n\t};\n\t\n\t/*\n\t    menu - img\n\t*/\n\t// 构造函数\n\tfunction Image(editor) {\n\t    this.editor = editor;\n\t    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-image\"><i/></div>');\n\t    this.type = 'panel';\n\t\n\t    // 当前是否 active 状态\n\t    this._active = false;\n\t}\n\t\n\t// 原型\n\tImage.prototype = {\n\t    constructor: Image,\n\t\n\t    onClick: function onClick() {\n\t        if (this._active) {\n\t            this._createEditPanel();\n\t        } else {\n\t            this._createInsertPanel();\n\t        }\n\t    },\n\t\n\t    _createEditPanel: function _createEditPanel() {\n\t        var editor = this.editor;\n\t\n\t        // id\n\t        var width30 = getRandom('width-30');\n\t        var width50 = getRandom('width-50');\n\t        var width100 = getRandom('width-100');\n\t        var delBtn = getRandom('del-btn');\n\t\n\t        // tab 配置\n\t        var tabsConfig = [{\n\t            title: '编辑图片',\n\t            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n\t            events: [{\n\t                selector: '#' + width30,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $img = editor._selectedImg;\n\t                    if ($img) {\n\t                        $img.css('max-width', '30%');\n\t                    }\n\t                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                    return true;\n\t                }\n\t            }, {\n\t                selector: '#' + width50,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $img = editor._selectedImg;\n\t                    if ($img) {\n\t                        $img.css('max-width', '50%');\n\t                    }\n\t                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                    return true;\n\t                }\n\t            }, {\n\t                selector: '#' + width100,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $img = editor._selectedImg;\n\t                    if ($img) {\n\t                        $img.css('max-width', '100%');\n\t                    }\n\t                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                    return true;\n\t                }\n\t            }, {\n\t                selector: '#' + delBtn,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $img = editor._selectedImg;\n\t                    if ($img) {\n\t                        $img.remove();\n\t                    }\n\t                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\t                    return true;\n\t                }\n\t            }]\n\t        }];\n\t\n\t        // 创建 panel 并显示\n\t        var panel = new Panel(this, {\n\t            width: 300,\n\t            tabs: tabsConfig\n\t        });\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    _createInsertPanel: function _createInsertPanel() {\n\t        var editor = this.editor;\n\t        var uploadImg = editor.uploadImg;\n\t        var config = editor.config;\n\t\n\t        // id\n\t        var upTriggerId = getRandom('up-trigger');\n\t        var upFileId = getRandom('up-file');\n\t        var linkUrlId = getRandom('link-url');\n\t        var linkBtnId = getRandom('link-btn');\n\t\n\t        // tabs 的配置\n\t        var tabsConfig = [{\n\t            title: '上传图片',\n\t            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n\t            events: [{\n\t                // 触发选择图片\n\t                selector: '#' + upTriggerId,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $file = $('#' + upFileId);\n\t                    var fileElem = $file[0];\n\t                    if (fileElem) {\n\t                        fileElem.click();\n\t                    } else {\n\t                        // 返回 true 可关闭 panel\n\t                        return true;\n\t                    }\n\t                }\n\t            }, {\n\t                // 选择图片完毕\n\t                selector: '#' + upFileId,\n\t                type: 'change',\n\t                fn: function fn() {\n\t                    var $file = $('#' + upFileId);\n\t                    var fileElem = $file[0];\n\t                    if (!fileElem) {\n\t                        // 返回 true 可关闭 panel\n\t                        return true;\n\t                    }\n\t\n\t                    // 获取选中的 file 对象列表\n\t                    var fileList = fileElem.files;\n\t                    if (fileList.length) {\n\t                        uploadImg.uploadImg(fileList);\n\t                    }\n\t\n\t                    // 返回 true 可关闭 panel\n\t                    return true;\n\t                }\n\t            }]\n\t        }, // first tab end\n\t        {\n\t            title: '网络图片',\n\t            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n\t            events: [{\n\t                selector: '#' + linkBtnId,\n\t                type: 'click',\n\t                fn: function fn() {\n\t                    var $linkUrl = $('#' + linkUrlId);\n\t                    var url = $linkUrl.val().trim();\n\t\n\t                    if (url) {\n\t                        uploadImg.insertLinkImg(url);\n\t                    }\n\t\n\t                    // 返回 true 表示函数执行结束之后关闭 panel\n\t                    return true;\n\t                }\n\t            }]\n\t        } // second tab end\n\t        ]; // tabs end\n\t\n\t        // 判断 tabs 的显示\n\t        var tabsConfigResult = [];\n\t        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n\t            // 显示“上传图片”\n\t            tabsConfigResult.push(tabsConfig[0]);\n\t        }\n\t        if (config.showLinkImg) {\n\t            // 显示“网络图片”\n\t            tabsConfigResult.push(tabsConfig[1]);\n\t        }\n\t\n\t        // 创建 panel 并显示\n\t        var panel = new Panel(this, {\n\t            width: 300,\n\t            tabs: tabsConfigResult\n\t        });\n\t        panel.show();\n\t\n\t        // 记录属性\n\t        this.panel = panel;\n\t    },\n\t\n\t    // 试图改变 active 状态\n\t    tryChangeActive: function tryChangeActive(e) {\n\t        var editor = this.editor;\n\t        var $elem = this.$elem;\n\t        if (editor._selectedImg) {\n\t            this._active = true;\n\t            $elem.addClass('w-e-active');\n\t        } else {\n\t            this._active = false;\n\t            $elem.removeClass('w-e-active');\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    所有菜单的汇总\n\t*/\n\t\n\t// 存储菜单的构造函数\n\tvar MenuConstructors = {};\n\t\n\tMenuConstructors.bold = Bold;\n\t\n\tMenuConstructors.head = Head;\n\t\n\tMenuConstructors.link = Link;\n\t\n\tMenuConstructors.italic = Italic;\n\t\n\tMenuConstructors.redo = Redo;\n\t\n\tMenuConstructors.strikeThrough = StrikeThrough;\n\t\n\tMenuConstructors.underline = Underline;\n\t\n\tMenuConstructors.undo = Undo;\n\t\n\tMenuConstructors.list = List;\n\t\n\tMenuConstructors.justify = Justify;\n\t\n\tMenuConstructors.foreColor = ForeColor;\n\t\n\tMenuConstructors.backColor = BackColor;\n\t\n\tMenuConstructors.quote = Quote;\n\t\n\tMenuConstructors.code = Code;\n\t\n\tMenuConstructors.emoticon = Emoticon;\n\t\n\tMenuConstructors.table = Table;\n\t\n\tMenuConstructors.video = Video;\n\t\n\tMenuConstructors.image = Image;\n\t\n\t/*\n\t    菜单集合\n\t*/\n\t// 构造函数\n\tfunction Menus(editor) {\n\t    this.editor = editor;\n\t    this.menus = {};\n\t}\n\t\n\t// 修改原型\n\tMenus.prototype = {\n\t    constructor: Menus,\n\t\n\t    // 初始化菜单\n\t    init: function init() {\n\t        var _this = this;\n\t\n\t        var editor = this.editor;\n\t        var config = editor.config || {};\n\t        var configMenus = config.menus || []; // 获取配置中的菜单\n\t\n\t        // 根据配置信息，创建菜单\n\t        configMenus.forEach(function (menuKey) {\n\t            var MenuConstructor = MenuConstructors[menuKey];\n\t            if (MenuConstructor && typeof MenuConstructor === 'function') {\n\t                // 创建单个菜单\n\t                _this.menus[menuKey] = new MenuConstructor(editor);\n\t            }\n\t        });\n\t\n\t        // 添加到菜单栏\n\t        this._addToToolbar();\n\t\n\t        // 绑定事件\n\t        this._bindEvent();\n\t    },\n\t\n\t    // 添加到菜单栏\n\t    _addToToolbar: function _addToToolbar() {\n\t        var editor = this.editor;\n\t        var $toolbarElem = editor.$toolbarElem;\n\t        var menus = this.menus;\n\t        var config = editor.config;\n\t        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n\t        var zIndex = config.zIndex + 1;\n\t        objForEach(menus, function (key, menu) {\n\t            var $elem = menu.$elem;\n\t            if ($elem) {\n\t                // 设置 z-index\n\t                $elem.css('z-index', zIndex);\n\t                $toolbarElem.append($elem);\n\t            }\n\t        });\n\t    },\n\t\n\t    // 绑定菜单 click mouseenter 事件\n\t    _bindEvent: function _bindEvent() {\n\t        var menus = this.menus;\n\t        var editor = this.editor;\n\t        objForEach(menus, function (key, menu) {\n\t            var type = menu.type;\n\t            if (!type) {\n\t                return;\n\t            }\n\t            var $elem = menu.$elem;\n\t            var droplist = menu.droplist;\n\t            var panel = menu.panel;\n\t\n\t            // 点击类型，例如 bold\n\t            if (type === 'click' && menu.onClick) {\n\t                $elem.on('click', function (e) {\n\t                    if (editor.selection.getRange() == null) {\n\t                        return;\n\t                    }\n\t                    menu.onClick(e);\n\t                });\n\t            }\n\t\n\t            // 下拉框，例如 head\n\t            if (type === 'droplist' && droplist) {\n\t                $elem.on('mouseenter', function (e) {\n\t                    if (editor.selection.getRange() == null) {\n\t                        return;\n\t                    }\n\t                    // 显示\n\t                    droplist.showTimeoutId = setTimeout(function () {\n\t                        droplist.show();\n\t                    }, 200);\n\t                }).on('mouseleave', function (e) {\n\t                    // 隐藏\n\t                    droplist.hideTimeoutId = setTimeout(function () {\n\t                        droplist.hide();\n\t                    }, 0);\n\t                });\n\t            }\n\t\n\t            // 弹框类型，例如 link\n\t            if (type === 'panel' && menu.onClick) {\n\t                $elem.on('click', function (e) {\n\t                    e.stopPropagation();\n\t                    if (editor.selection.getRange() == null) {\n\t                        return;\n\t                    }\n\t                    // 在自定义事件中显示 panel\n\t                    menu.onClick(e);\n\t                });\n\t            }\n\t        });\n\t    },\n\t\n\t    // 尝试修改菜单状态\n\t    changeActive: function changeActive() {\n\t        var menus = this.menus;\n\t        objForEach(menus, function (key, menu) {\n\t            if (menu.tryChangeActive) {\n\t                setTimeout(function () {\n\t                    menu.tryChangeActive();\n\t                }, 100);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\t/*\n\t    粘贴信息的处理\n\t*/\n\t\n\t// 获取粘贴的纯文本\n\tfunction getPasteText(e) {\n\t    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n\t    var pasteText = void 0;\n\t    if (clipboardData == null) {\n\t        pasteText = window.clipboardData && window.clipboardData.getData('text');\n\t    } else {\n\t        pasteText = clipboardData.getData('text/plain');\n\t    }\n\t\n\t    return replaceHtmlSymbol(pasteText);\n\t}\n\t\n\t// 获取粘贴的html\n\tfunction getPasteHtml(e, filterStyle) {\n\t    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n\t    var pasteText = void 0,\n\t        pasteHtml = void 0;\n\t    if (clipboardData == null) {\n\t        pasteText = window.clipboardData && window.clipboardData.getData('text');\n\t    } else {\n\t        pasteText = clipboardData.getData('text/plain');\n\t        pasteHtml = clipboardData.getData('text/html');\n\t    }\n\t    if (!pasteHtml && pasteText) {\n\t        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n\t    }\n\t    if (!pasteHtml) {\n\t        return;\n\t    }\n\t\n\t    // 过滤word中状态过来的无用字符\n\t    var docSplitHtml = pasteHtml.split('</html>');\n\t    if (docSplitHtml.length === 2) {\n\t        pasteHtml = docSplitHtml[0];\n\t    }\n\t\n\t    // 过滤无用标签\n\t    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n\t\n\t    if (filterStyle) {\n\t        // 过滤样式\n\t        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").+?('|\")/igm, '');\n\t    } else {\n\t        // 保留样式\n\t        pasteHtml = pasteHtml.replace(/\\s?class=('|\").+?('|\")/igm, '');\n\t    }\n\t\n\t    return pasteHtml;\n\t}\n\t\n\t// 获取粘贴的图片文件\n\tfunction getPasteImgs(e) {\n\t    var result = [];\n\t    var txt = getPasteText(e);\n\t    if (txt) {\n\t        // 有文字，就忽略图片\n\t        return result;\n\t    }\n\t\n\t    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n\t    var items = clipboardData.items;\n\t    if (!items) {\n\t        return result;\n\t    }\n\t\n\t    objForEach(items, function (key, value) {\n\t        var type = value.type;\n\t        if (/image/i.test(type)) {\n\t            result.push(value.getAsFile());\n\t        }\n\t    });\n\t\n\t    return result;\n\t}\n\t\n\t/*\n\t    编辑区域\n\t*/\n\t\n\t// 构造函数\n\tfunction Text(editor) {\n\t    this.editor = editor;\n\t}\n\t\n\t// 修改原型\n\tText.prototype = {\n\t    constructor: Text,\n\t\n\t    // 初始化\n\t    init: function init() {\n\t        // 绑定事件\n\t        this._bindEvent();\n\t    },\n\t\n\t    // 清空内容\n\t    clear: function clear() {\n\t        this.html('<p><br></p>');\n\t    },\n\t\n\t    // 获取 设置 html\n\t    html: function html(val) {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        if (val == null) {\n\t            return $textElem.html();\n\t        } else {\n\t            $textElem.html(val);\n\t\n\t            // 初始化选取，将光标定位到内容尾部\n\t            editor.initSelection();\n\t        }\n\t    },\n\t\n\t    // 获取 设置 text\n\t    text: function text(val) {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        if (val == null) {\n\t            return $textElem.text();\n\t        } else {\n\t            $textElem.text('<p>' + val + '</p>');\n\t\n\t            // 初始化选取，将光标定位到内容尾部\n\t            editor.initSelection();\n\t        }\n\t    },\n\t\n\t    // 追加内容\n\t    append: function append(html) {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        $textElem.append($(html));\n\t\n\t        // 初始化选取，将光标定位到内容尾部\n\t        editor.initSelection();\n\t    },\n\t\n\t    // 绑定事件\n\t    _bindEvent: function _bindEvent() {\n\t        // 实时保存选取\n\t        this._saveRangeRealTime();\n\t\n\t        // 按回车建时的特殊处理\n\t        this._enterKeyHandle();\n\t\n\t        // 清空时保留 <p><br></p>\n\t        this._clearHandle();\n\t\n\t        // 粘贴事件（粘贴文字，粘贴图片）\n\t        this._pasteHandle();\n\t\n\t        // tab 特殊处理\n\t        this._tabHandle();\n\t\n\t        // img 点击\n\t        this._imgHandle();\n\t    },\n\t\n\t    // 实时保存选取\n\t    _saveRangeRealTime: function _saveRangeRealTime() {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t\n\t        // 保存当前的选区\n\t        function saveRange(e) {\n\t            // 随时保存选区\n\t            editor.selection.saveRange();\n\t            // 更新按钮 ative 状态\n\t            editor.menus.changeActive();\n\t        }\n\t        // 按键后保存\n\t        $textElem.on('keyup', saveRange);\n\t        $textElem.on('mousedown', function (e) {\n\t            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n\t            $textElem.on('mouseleave', saveRange);\n\t        });\n\t        $textElem.on('mouseup', function (e) {\n\t            saveRange();\n\t            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n\t            $textElem.off('mouseleave', saveRange);\n\t        });\n\t    },\n\t\n\t    // 按回车键时的特殊处理\n\t    _enterKeyHandle: function _enterKeyHandle() {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t\n\t        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n\t        function pHandle(e) {\n\t            var $selectionElem = editor.selection.getSelectionContainerElem();\n\t            var $parentElem = $selectionElem.parent();\n\t            if (!$parentElem.equal($textElem)) {\n\t                // 不是顶级标签\n\t                return;\n\t            }\n\t            var nodeName = $selectionElem.getNodeName();\n\t            if (nodeName === 'P') {\n\t                // 当前的标签是 P ，不用做处理\n\t                return;\n\t            }\n\t\n\t            if ($selectionElem.text()) {\n\t                // 有内容，不做处理\n\t                return;\n\t            }\n\t\n\t            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n\t            var $p = $('<p><br></p>');\n\t            $p.insertBefore($selectionElem);\n\t            editor.selection.createRangeByElem($p, true);\n\t            editor.selection.restoreSelection();\n\t            $selectionElem.remove();\n\t        }\n\t\n\t        $textElem.on('keyup', function (e) {\n\t            if (e.keyCode !== 13) {\n\t                // 不是回车键\n\t                return;\n\t            }\n\t            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n\t            pHandle(e);\n\t        });\n\t\n\t        // <pre><code></code></pre> 回车时 特殊处理\n\t        function codeHandle(e) {\n\t            var $selectionElem = editor.selection.getSelectionContainerElem();\n\t            if (!$selectionElem) {\n\t                return;\n\t            }\n\t            var $parentElem = $selectionElem.parent();\n\t            var selectionNodeName = $selectionElem.getNodeName();\n\t            var parentNodeName = $parentElem.getNodeName();\n\t\n\t            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n\t                // 不符合要求 忽略\n\t                return;\n\t            }\n\t\n\t            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n\t                // 必须原生支持 insertHTML 命令\n\t                return;\n\t            }\n\t\n\t            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n\t            if (editor._willBreakCode === true) {\n\t                // 此时可以跳出代码块\n\t                // 插入 <p> ，并将选取定位到 <p>\n\t                var $p = $('<p><br></p>');\n\t                $p.insertAfter($parentElem);\n\t                editor.selection.createRangeByElem($p, true);\n\t                editor.selection.restoreSelection();\n\t\n\t                // 修改状态\n\t                editor._willBreakCode = false;\n\t\n\t                e.preventDefault();\n\t                return;\n\t            }\n\t\n\t            var _startOffset = editor.selection.getRange().startOffset;\n\t\n\t            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n\t            editor.cmd.do('insertHTML', '\\n');\n\t            editor.selection.saveRange();\n\t            if (editor.selection.getRange().startOffset === _startOffset) {\n\t                // 没起作用，再来一遍\n\t                editor.cmd.do('insertHTML', '\\n');\n\t            }\n\t\n\t            var codeLength = $selectionElem.html().length;\n\t            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n\t                // 说明光标在代码最后的位置，执行了回车操作\n\t                // 记录下来，以便下次回车时候跳出 code\n\t                editor._willBreakCode = true;\n\t            }\n\t\n\t            // 阻止默认行为\n\t            e.preventDefault();\n\t        }\n\t\n\t        $textElem.on('keydown', function (e) {\n\t            if (e.keyCode !== 13) {\n\t                // 不是回车键\n\t                // 取消即将跳转代码块的记录\n\t                editor._willBreakCode = false;\n\t                return;\n\t            }\n\t            // <pre><code></code></pre> 回车时 特殊处理\n\t            codeHandle(e);\n\t        });\n\t    },\n\t\n\t    // 清空时保留 <p><br></p>\n\t    _clearHandle: function _clearHandle() {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t\n\t        $textElem.on('keydown', function (e) {\n\t            if (e.keyCode !== 8) {\n\t                return;\n\t            }\n\t            var txtHtml = $textElem.html().toLowerCase().trim();\n\t            if (txtHtml === '<p><br></p>') {\n\t                // 最后剩下一个空行，就不再删除了\n\t                e.preventDefault();\n\t                return;\n\t            }\n\t        });\n\t\n\t        $textElem.on('keyup', function (e) {\n\t            if (e.keyCode !== 8) {\n\t                return;\n\t            }\n\t            var $p = void 0;\n\t            var txtHtml = $textElem.html().toLowerCase().trim();\n\t\n\t            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n\t            if (!txtHtml || txtHtml === '<br>') {\n\t                // 内容空了\n\t                $p = $('<p><br/></p>');\n\t                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n\t                $textElem.append($p);\n\t                editor.selection.createRangeByElem($p, false, true);\n\t                editor.selection.restoreSelection();\n\t            }\n\t        });\n\t    },\n\t\n\t    // 粘贴事件（粘贴文字 粘贴图片）\n\t    _pasteHandle: function _pasteHandle() {\n\t        var editor = this.editor;\n\t        var pasteFilterStyle = editor.config.pasteFilterStyle;\n\t        var $textElem = editor.$textElem;\n\t\n\t        // 粘贴文字\n\t        $textElem.on('paste', function (e) {\n\t            if (UA.isIE()) {\n\t                return;\n\t            } else {\n\t                // 阻止默认行为，使用 execCommand 的粘贴命令\n\t                e.preventDefault();\n\t            }\n\t\n\t            // 获取粘贴的文字\n\t            var pasteHtml = getPasteHtml(e, pasteFilterStyle);\n\t            var pasteText = getPasteText(e);\n\t            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\t\n\t            var $selectionElem = editor.selection.getSelectionContainerElem();\n\t            if (!$selectionElem) {\n\t                return;\n\t            }\n\t            var nodeName = $selectionElem.getNodeName();\n\t\n\t            // code 中粘贴忽略\n\t            if (nodeName === 'CODE' || nodeName === 'PRE') {\n\t                return;\n\t            }\n\t\n\t            // 先放开注释，有问题再追查 ————\n\t            // // 表格中忽略，可能会出现异常问题\n\t            // if (nodeName === 'TD' || nodeName === 'TH') {\n\t            //     return\n\t            // }\n\t\n\t            if (nodeName === 'DIV' || $textElem.html() === '<p><br></p>' || !pasteFilterStyle) {\n\t                // 是 div，可粘贴过滤样式的文字和链接。另外，不过滤粘贴的样式，也可直接插入 HTML\n\t                if (!pasteHtml) {\n\t                    return;\n\t                }\n\t                try {\n\t                    // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n\t                    // 因此执行 insertHTML 会报错\n\t                    editor.cmd.do('insertHTML', pasteHtml);\n\t                } catch (ex) {\n\t                    // 此时使用 pasteText 来兼容一下\n\t                    editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n\t                }\n\t            } else {\n\t                // 不是 div，证明在已有内容的元素中粘贴，只粘贴纯文本\n\t                if (!pasteText) {\n\t                    return;\n\t                }\n\t                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n\t            }\n\t        });\n\t\n\t        // 粘贴图片\n\t        $textElem.on('paste', function (e) {\n\t            if (UA.isIE()) {\n\t                return;\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t\n\t            // 获取粘贴的图片\n\t            var pasteFiles = getPasteImgs(e);\n\t            if (!pasteFiles || !pasteFiles.length) {\n\t                return;\n\t            }\n\t\n\t            // 获取当前的元素\n\t            var $selectionElem = editor.selection.getSelectionContainerElem();\n\t            if (!$selectionElem) {\n\t                return;\n\t            }\n\t            var nodeName = $selectionElem.getNodeName();\n\t\n\t            // code 中粘贴忽略\n\t            if (nodeName === 'CODE' || nodeName === 'PRE') {\n\t                return;\n\t            }\n\t\n\t            // 上传图片\n\t            var uploadImg = editor.uploadImg;\n\t            uploadImg.uploadImg(pasteFiles);\n\t        });\n\t    },\n\t\n\t    // tab 特殊处理\n\t    _tabHandle: function _tabHandle() {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t\n\t        $textElem.on('keydown', function (e) {\n\t            if (e.keyCode !== 9) {\n\t                return;\n\t            }\n\t            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n\t                // 必须原生支持 insertHTML 命令\n\t                return;\n\t            }\n\t            var $selectionElem = editor.selection.getSelectionContainerElem();\n\t            if (!$selectionElem) {\n\t                return;\n\t            }\n\t            var $parentElem = $selectionElem.parent();\n\t            var selectionNodeName = $selectionElem.getNodeName();\n\t            var parentNodeName = $parentElem.getNodeName();\n\t\n\t            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n\t                // <pre><code> 里面\n\t                editor.cmd.do('insertHTML', '    ');\n\t            } else {\n\t                // 普通文字\n\t                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n\t            }\n\t\n\t            e.preventDefault();\n\t        });\n\t    },\n\t\n\t    // img 点击\n\t    _imgHandle: function _imgHandle() {\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        var selectedClass = 'w-e-selected';\n\t\n\t        // 为图片增加 selected 样式\n\t        $textElem.on('click', 'img', function (e) {\n\t            var img = this;\n\t            var $img = $(img);\n\t\n\t            // 去掉所有图片的 selected 样式\n\t            $textElem.find('img').removeClass(selectedClass);\n\t\n\t            // 为点击的图片增加样式，并记录当前图片\n\t            $img.addClass(selectedClass);\n\t            editor._selectedImg = $img;\n\t\n\t            // 修改选取\n\t            editor.selection.createRangeByElem($img);\n\t        });\n\t\n\t        // 去掉图片的 selected 样式\n\t        $textElem.on('click  keyup', function (e) {\n\t            if (e.target.matches('img')) {\n\t                // 点击的是图片，忽略\n\t                return;\n\t            }\n\t            // 取消掉 selected 样式，并删除记录\n\t            $textElem.find('img').removeClass(selectedClass);\n\t            editor._selectedImg = null;\n\t        });\n\t    }\n\t};\n\t\n\t/*\n\t    命令，封装 document.execCommand\n\t*/\n\t\n\t// 构造函数\n\tfunction Command(editor) {\n\t    this.editor = editor;\n\t}\n\t\n\t// 修改原型\n\tCommand.prototype = {\n\t    constructor: Command,\n\t\n\t    // 执行命令\n\t    do: function _do(name, value) {\n\t        var editor = this.editor;\n\t\n\t        // 如果无选区，忽略\n\t        if (!editor.selection.getRange()) {\n\t            return;\n\t        }\n\t\n\t        // 恢复选取\n\t        editor.selection.restoreSelection();\n\t\n\t        // 执行\n\t        var _name = '_' + name;\n\t        if (this[_name]) {\n\t            // 有自定义事件\n\t            this[_name](value);\n\t        } else {\n\t            // 默认 command\n\t            this._execCommand(name, value);\n\t        }\n\t\n\t        // 修改菜单状态\n\t        editor.menus.changeActive();\n\t\n\t        // 最后，恢复选取保证光标在原来的位置闪烁\n\t        editor.selection.saveRange();\n\t        editor.selection.restoreSelection();\n\t\n\t        // 触发 onchange\n\t        editor.change && editor.change();\n\t    },\n\t\n\t    // 自定义 insertHTML 事件\n\t    _insertHTML: function _insertHTML(html) {\n\t        var editor = this.editor;\n\t        var range = editor.selection.getRange();\n\t\n\t        // 保证传入的参数是 html 代码\n\t        var test = /^<.+>$/.test(html);\n\t        if (!test && !UA.isWebkit()) {\n\t            // webkit 可以插入非 html 格式的文字\n\t            throw new Error('执行 insertHTML 命令时传入的参数必须是 html 格式');\n\t        }\n\t\n\t        if (this.queryCommandSupported('insertHTML')) {\n\t            // W3C\n\t            this._execCommand('insertHTML', html);\n\t        } else if (range.insertNode) {\n\t            // IE\n\t            range.deleteContents();\n\t            range.insertNode($(html)[0]);\n\t        } else if (range.pasteHTML) {\n\t            // IE <= 10\n\t            range.pasteHTML(html);\n\t        }\n\t    },\n\t\n\t    // 插入 elem\n\t    _insertElem: function _insertElem($elem) {\n\t        var editor = this.editor;\n\t        var range = editor.selection.getRange();\n\t\n\t        if (range.insertNode) {\n\t            range.deleteContents();\n\t            range.insertNode($elem[0]);\n\t        }\n\t    },\n\t\n\t    // 封装 execCommand\n\t    _execCommand: function _execCommand(name, value) {\n\t        document.execCommand(name, false, value);\n\t    },\n\t\n\t    // 封装 document.queryCommandValue\n\t    queryCommandValue: function queryCommandValue(name) {\n\t        return document.queryCommandValue(name);\n\t    },\n\t\n\t    // 封装 document.queryCommandState\n\t    queryCommandState: function queryCommandState(name) {\n\t        return document.queryCommandState(name);\n\t    },\n\t\n\t    // 封装 document.queryCommandSupported\n\t    queryCommandSupported: function queryCommandSupported(name) {\n\t        return document.queryCommandSupported(name);\n\t    }\n\t};\n\t\n\t/*\n\t    selection range API\n\t*/\n\t\n\t// 构造函数\n\tfunction API(editor) {\n\t    this.editor = editor;\n\t    this._currentRange = null;\n\t}\n\t\n\t// 修改原型\n\tAPI.prototype = {\n\t    constructor: API,\n\t\n\t    // 获取 range 对象\n\t    getRange: function getRange() {\n\t        return this._currentRange;\n\t    },\n\t\n\t    // 保存选区\n\t    saveRange: function saveRange(_range) {\n\t        if (_range) {\n\t            // 保存已有选区\n\t            this._currentRange = _range;\n\t            return;\n\t        }\n\t\n\t        // 获取当前的选区\n\t        var selection = window.getSelection();\n\t        if (selection.rangeCount === 0) {\n\t            return;\n\t        }\n\t        var range = selection.getRangeAt(0);\n\t\n\t        // 判断选区内容是否在编辑内容之内\n\t        var $containerElem = this.getSelectionContainerElem(range);\n\t        if (!$containerElem) {\n\t            return;\n\t        }\n\t        var editor = this.editor;\n\t        var $textElem = editor.$textElem;\n\t        if ($textElem.isContain($containerElem)) {\n\t            // 是编辑内容之内的\n\t            this._currentRange = range;\n\t        }\n\t    },\n\t\n\t    // 折叠选区\n\t    collapseRange: function collapseRange(toStart) {\n\t        if (toStart == null) {\n\t            // 默认为 false\n\t            toStart = false;\n\t        }\n\t        var range = this._currentRange;\n\t        if (range) {\n\t            range.collapse(toStart);\n\t        }\n\t    },\n\t\n\t    // 选中区域的文字\n\t    getSelectionText: function getSelectionText() {\n\t        var range = this._currentRange;\n\t        if (range) {\n\t            return this._currentRange.toString();\n\t        } else {\n\t            return '';\n\t        }\n\t    },\n\t\n\t    // 选区的 $Elem\n\t    getSelectionContainerElem: function getSelectionContainerElem(range) {\n\t        range = range || this._currentRange;\n\t        var elem = void 0;\n\t        if (range) {\n\t            elem = range.commonAncestorContainer;\n\t            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n\t        }\n\t    },\n\t    getSelectionStartElem: function getSelectionStartElem(range) {\n\t        range = range || this._currentRange;\n\t        var elem = void 0;\n\t        if (range) {\n\t            elem = range.startContainer;\n\t            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n\t        }\n\t    },\n\t    getSelectionEndElem: function getSelectionEndElem(range) {\n\t        range = range || this._currentRange;\n\t        var elem = void 0;\n\t        if (range) {\n\t            elem = range.endContainer;\n\t            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n\t        }\n\t    },\n\t\n\t    // 选区是否为空\n\t    isSelectionEmpty: function isSelectionEmpty() {\n\t        var range = this._currentRange;\n\t        if (range && range.startContainer) {\n\t            if (range.startContainer === range.endContainer) {\n\t                if (range.startOffset === range.endOffset) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t\n\t    // 恢复选区\n\t    restoreSelection: function restoreSelection() {\n\t        var selection = window.getSelection();\n\t        selection.removeAllRanges();\n\t        selection.addRange(this._currentRange);\n\t    },\n\t\n\t    // 创建一个空白（即 &#8203 字符）选区\n\t    createEmptyRange: function createEmptyRange() {\n\t        var editor = this.editor;\n\t        var range = this.getRange();\n\t        var $elem = void 0;\n\t\n\t        if (!range) {\n\t            // 当前无 range\n\t            return;\n\t        }\n\t        if (!this.isSelectionEmpty()) {\n\t            // 当前选区必须没有内容才可以\n\t            return;\n\t        }\n\t\n\t        try {\n\t            // 目前只支持 webkit 内核\n\t            if (UA.isWebkit()) {\n\t                // 插入 &#8203\n\t                editor.cmd.do('insertHTML', '&#8203;');\n\t                // 修改 offset 位置\n\t                range.setEnd(range.endContainer, range.endOffset + 1);\n\t                // 存储\n\t                this.saveRange(range);\n\t            } else {\n\t                $elem = $('<strong>&#8203;</strong>');\n\t                editor.cmd.do('insertElem', $elem);\n\t                this.createRangeByElem($elem, true);\n\t            }\n\t        } catch (ex) {\n\t            // 部分情况下会报错，兼容一下\n\t        }\n\t    },\n\t\n\t    // 根据 $Elem 设置选区\n\t    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n\t        // $elem - 经过封装的 elem\n\t        // toStart - true 开始位置，false 结束位置\n\t        // isContent - 是否选中Elem的内容\n\t        if (!$elem.length) {\n\t            return;\n\t        }\n\t\n\t        var elem = $elem[0];\n\t        var range = document.createRange();\n\t\n\t        if (isContent) {\n\t            range.selectNodeContents(elem);\n\t        } else {\n\t            range.selectNode(elem);\n\t        }\n\t\n\t        if (typeof toStart === 'boolean') {\n\t            range.collapse(toStart);\n\t        }\n\t\n\t        // 存储 range\n\t        this.saveRange(range);\n\t    }\n\t};\n\t\n\t/*\n\t    上传进度条\n\t*/\n\t\n\tfunction Progress(editor) {\n\t    this.editor = editor;\n\t    this._time = 0;\n\t    this._isShow = false;\n\t    this._isRender = false;\n\t    this._timeoutId = 0;\n\t    this.$textContainer = editor.$textContainerElem;\n\t    this.$bar = $('<div class=\"w-e-progress\"></div>');\n\t}\n\t\n\tProgress.prototype = {\n\t    constructor: Progress,\n\t\n\t    show: function show(progress) {\n\t        var _this = this;\n\t\n\t        // 状态处理\n\t        if (this._isShow) {\n\t            return;\n\t        }\n\t        this._isShow = true;\n\t\n\t        // 渲染\n\t        var $bar = this.$bar;\n\t        if (!this._isRender) {\n\t            var $textContainer = this.$textContainer;\n\t            $textContainer.append($bar);\n\t        } else {\n\t            this._isRender = true;\n\t        }\n\t\n\t        // 改变进度（节流，100ms 渲染一次）\n\t        if (Date.now() - this._time > 100) {\n\t            if (progress <= 1) {\n\t                $bar.css('width', progress * 100 + '%');\n\t                this._time = Date.now();\n\t            }\n\t        }\n\t\n\t        // 隐藏\n\t        var timeoutId = this._timeoutId;\n\t        if (timeoutId) {\n\t            clearTimeout(timeoutId);\n\t        }\n\t        timeoutId = setTimeout(function () {\n\t            _this._hide();\n\t        }, 500);\n\t    },\n\t\n\t    _hide: function _hide() {\n\t        var $bar = this.$bar;\n\t        $bar.remove();\n\t\n\t        // 修改状态\n\t        this._time = 0;\n\t        this._isShow = false;\n\t        this._isRender = false;\n\t    }\n\t};\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t  return typeof obj;\n\t} : function (obj) {\n\t  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\t\n\t/*\n\t    上传图片\n\t*/\n\t\n\t// 构造函数\n\tfunction UploadImg(editor) {\n\t    this.editor = editor;\n\t}\n\t\n\t// 原型\n\tUploadImg.prototype = {\n\t    constructor: UploadImg,\n\t\n\t    // 根据 debug 弹出不同的信息\n\t    _alert: function _alert(alertInfo, debugInfo) {\n\t        var editor = this.editor;\n\t        var debug = editor.config.debug;\n\t        var customAlert = editor.config.customAlert;\n\t\n\t        if (debug) {\n\t            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n\t        } else {\n\t            if (customAlert && typeof customAlert === 'function') {\n\t                customAlert(alertInfo);\n\t            } else {\n\t                alert(alertInfo);\n\t            }\n\t        }\n\t    },\n\t\n\t    // 根据链接插入图片\n\t    insertLinkImg: function insertLinkImg(link) {\n\t        var _this2 = this;\n\t\n\t        if (!link) {\n\t            return;\n\t        }\n\t        var editor = this.editor;\n\t        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\t\n\t        // 验证图片 url 是否有效，无效的话给出提示\n\t        var img = document.createElement('img');\n\t        img.onload = function () {\n\t            img = null;\n\t        };\n\t        img.onerror = function () {\n\t            img = null;\n\t            // 无法成功下载图片\n\t            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n\t            return;\n\t        };\n\t        img.onabort = function () {\n\t            img = null;\n\t        };\n\t        img.src = link;\n\t    },\n\t\n\t    // 上传图片\n\t    uploadImg: function uploadImg(files) {\n\t        var _this3 = this;\n\t\n\t        if (!files || !files.length) {\n\t            return;\n\t        }\n\t\n\t        // ------------------------------ 获取配置信息 ------------------------------\n\t        var editor = this.editor;\n\t        var config = editor.config;\n\t        var maxSize = config.uploadImgMaxSize;\n\t        var maxSizeM = maxSize / 1000 / 1000;\n\t        var maxLength = config.uploadImgMaxLength || 10000;\n\t        var uploadImgServer = config.uploadImgServer;\n\t        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\t        var uploadFileName = config.uploadFileName || '';\n\t        var uploadImgParams = config.uploadImgParams || {};\n\t        var uploadImgHeaders = config.uploadImgHeaders || {};\n\t        var hooks = config.uploadImgHooks || {};\n\t        var timeout = config.uploadImgTimeout || 3000;\n\t        var withCredentials = config.withCredentials;\n\t        if (withCredentials == null) {\n\t            withCredentials = false;\n\t        }\n\t        var customUploadImg = config.customUploadImg;\n\t\n\t        // ------------------------------ 验证文件信息 ------------------------------\n\t        var resultFiles = [];\n\t        var errInfo = [];\n\t        arrForEach(files, function (file) {\n\t            var name = file.name;\n\t            var size = file.size;\n\t\n\t            // chrome 低版本 name === undefined\n\t            if (!name || !size) {\n\t                return;\n\t            }\n\t\n\t            if (/\\.(jpg|jpeg|png|bmp|gif)$/i.test(name) === false) {\n\t                // 后缀名不合法，不是图片\n\t                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n\t                return;\n\t            }\n\t            if (maxSize < size) {\n\t                // 上传图片过大\n\t                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n\t                return;\n\t            }\n\t\n\t            // 验证通过的加入结果列表\n\t            resultFiles.push(file);\n\t        });\n\t        // 抛出验证信息\n\t        if (errInfo.length) {\n\t            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n\t            return;\n\t        }\n\t        if (resultFiles.length > maxLength) {\n\t            this._alert('一次最多上传' + maxLength + '张图片');\n\t            return;\n\t        }\n\t\n\t        // ------------------------------ 自定义上传 ------------------------------\n\t        if (customUploadImg && typeof customUploadImg === 'function') {\n\t            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\t\n\t            // 阻止以下代码执行\n\t            return;\n\t        }\n\t\n\t        // 添加图片数据\n\t        var formdata = new FormData();\n\t        arrForEach(resultFiles, function (file) {\n\t            var name = uploadFileName || file.name;\n\t            formdata.append(name, file);\n\t        });\n\t\n\t        // ------------------------------ 上传图片 ------------------------------\n\t        if (uploadImgServer && typeof uploadImgServer === 'string') {\n\t            // 添加参数\n\t            var uploadImgServerArr = uploadImgServer.split('#');\n\t            uploadImgServer = uploadImgServerArr[0];\n\t            var uploadImgServerHash = uploadImgServerArr[1] || '';\n\t            objForEach(uploadImgParams, function (key, val) {\n\t                val = encodeURIComponent(val);\n\t\n\t                // 第一，将参数拼接到 url 中\n\t                if (uploadImgServer.indexOf('?') > 0) {\n\t                    uploadImgServer += '&';\n\t                } else {\n\t                    uploadImgServer += '?';\n\t                }\n\t                uploadImgServer = uploadImgServer + key + '=' + val;\n\t\n\t                // 第二，将参数添加到 formdata 中\n\t                formdata.append(key, val);\n\t            });\n\t            if (uploadImgServerHash) {\n\t                uploadImgServer += '#' + uploadImgServerHash;\n\t            }\n\t\n\t            // 定义 xhr\n\t            var xhr = new XMLHttpRequest();\n\t            xhr.open('POST', uploadImgServer);\n\t\n\t            // 设置超时\n\t            xhr.timeout = timeout;\n\t            xhr.ontimeout = function () {\n\t                // hook - timeout\n\t                if (hooks.timeout && typeof hooks.timeout === 'function') {\n\t                    hooks.timeout(xhr, editor);\n\t                }\n\t\n\t                _this3._alert('上传图片超时');\n\t            };\n\t\n\t            // 监控 progress\n\t            if (xhr.upload) {\n\t                xhr.upload.onprogress = function (e) {\n\t                    var percent = void 0;\n\t                    // 进度条\n\t                    var progressBar = new Progress(editor);\n\t                    if (e.lengthComputable) {\n\t                        percent = e.loaded / e.total;\n\t                        progressBar.show(percent);\n\t                    }\n\t                };\n\t            }\n\t\n\t            // 返回数据\n\t            xhr.onreadystatechange = function () {\n\t                var result = void 0;\n\t                if (xhr.readyState === 4) {\n\t                    if (xhr.status < 200 || xhr.status >= 300) {\n\t                        // hook - error\n\t                        if (hooks.error && typeof hooks.error === 'function') {\n\t                            hooks.error(xhr, editor);\n\t                        }\n\t\n\t                        // xhr 返回状态错误\n\t                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n\t                        return;\n\t                    }\n\t\n\t                    result = xhr.responseText;\n\t                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n\t                        try {\n\t                            result = JSON.parse(result);\n\t                        } catch (ex) {\n\t                            // hook - fail\n\t                            if (hooks.fail && typeof hooks.fail === 'function') {\n\t                                hooks.fail(xhr, editor, result);\n\t                            }\n\t\n\t                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n\t                            return;\n\t                        }\n\t                    }\n\t                    if (!hooks.customInsert && result.errno != '0') {\n\t                        // hook - fail\n\t                        if (hooks.fail && typeof hooks.fail === 'function') {\n\t                            hooks.fail(xhr, editor, result);\n\t                        }\n\t\n\t                        // 数据错误\n\t                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n\t                    } else {\n\t                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n\t                            // 使用者自定义插入方法\n\t                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n\t                        } else {\n\t                            // 将图片插入编辑器\n\t                            var data = result.data || [];\n\t                            data.forEach(function (link) {\n\t                                _this3.insertLinkImg(link);\n\t                            });\n\t                        }\n\t\n\t                        // hook - success\n\t                        if (hooks.success && typeof hooks.success === 'function') {\n\t                            hooks.success(xhr, editor, result);\n\t                        }\n\t                    }\n\t                }\n\t            };\n\t\n\t            // hook - before\n\t            if (hooks.before && typeof hooks.before === 'function') {\n\t                var beforeResult = hooks.before(xhr, editor, resultFiles);\n\t                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n\t                    if (beforeResult.prevent) {\n\t                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n\t                        this._alert(beforeResult.msg);\n\t                        return;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // 自定义 headers\n\t            objForEach(uploadImgHeaders, function (key, val) {\n\t                xhr.setRequestHeader(key, val);\n\t            });\n\t\n\t            // 跨域传 cookie\n\t            xhr.withCredentials = withCredentials;\n\t\n\t            // 发送请求\n\t            xhr.send(formdata);\n\t\n\t            // 注意，要 return 。不去操作接下来的 base64 显示方式\n\t            return;\n\t        }\n\t\n\t        // ------------------------------ 显示 base64 格式 ------------------------------\n\t        if (uploadImgShowBase64) {\n\t            arrForEach(files, function (file) {\n\t                var _this = _this3;\n\t                var reader = new FileReader();\n\t                reader.readAsDataURL(file);\n\t                reader.onload = function () {\n\t                    _this.insertLinkImg(this.result);\n\t                };\n\t            });\n\t        }\n\t    }\n\t};\n\t\n\t/*\n\t    编辑器构造函数\n\t*/\n\t\n\t// id，累加\n\tvar editorId = 1;\n\t\n\t// 构造函数\n\tfunction Editor(toolbarSelector, textSelector) {\n\t    if (toolbarSelector == null) {\n\t        // 没有传入任何参数，报错\n\t        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n\t    }\n\t    // id，用以区分单个页面不同的编辑器对象\n\t    this.id = 'wangEditor-' + editorId++;\n\t\n\t    this.toolbarSelector = toolbarSelector;\n\t    this.textSelector = textSelector;\n\t\n\t    // 自定义配置\n\t    this.customConfig = {};\n\t}\n\t\n\t// 修改原型\n\tEditor.prototype = {\n\t    constructor: Editor,\n\t\n\t    // 初始化配置\n\t    _initConfig: function _initConfig() {\n\t        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n\t        var target = {};\n\t        this.config = Object.assign(target, config, this.customConfig);\n\t\n\t        // 将语言配置，生成正则表达式\n\t        var langConfig = this.config.lang || {};\n\t        var langArgs = [];\n\t        objForEach(langConfig, function (key, val) {\n\t            // key 即需要生成正则表达式的规则，如“插入链接”\n\t            // val 即需要被替换成的语言，如“insert link”\n\t            langArgs.push({\n\t                reg: new RegExp(key, 'img'),\n\t                val: val\n\t\n\t            });\n\t        });\n\t        this.config.langArgs = langArgs;\n\t    },\n\t\n\t    // 初始化 DOM\n\t    _initDom: function _initDom() {\n\t        var _this = this;\n\t\n\t        var toolbarSelector = this.toolbarSelector;\n\t        var $toolbarSelector = $(toolbarSelector);\n\t        var textSelector = this.textSelector;\n\t\n\t        var config$$1 = this.config;\n\t        var zIndex = config$$1.zIndex;\n\t\n\t        // 定义变量\n\t        var $toolbarElem = void 0,\n\t            $textContainerElem = void 0,\n\t            $textElem = void 0,\n\t            $children = void 0;\n\t\n\t        if (textSelector == null) {\n\t            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n\t            $toolbarElem = $('<div></div>');\n\t            $textContainerElem = $('<div></div>');\n\t\n\t            // 将编辑器区域原有的内容，暂存起来\n\t            $children = $toolbarSelector.children();\n\t\n\t            // 添加到 DOM 结构中\n\t            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\t\n\t            // 自行创建的，需要配置默认的样式\n\t            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n\t            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n\t        } else {\n\t            // toolbar 和 text 的选择器都有值，记录属性\n\t            $toolbarElem = $toolbarSelector;\n\t            $textContainerElem = $(textSelector);\n\t            // 将编辑器区域原有的内容，暂存起来\n\t            $children = $textContainerElem.children();\n\t        }\n\t\n\t        // 编辑区域\n\t        $textElem = $('<div></div>');\n\t        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\t\n\t        // 初始化编辑区域内容\n\t        if ($children && $children.length) {\n\t            $textElem.append($children);\n\t        } else {\n\t            $textElem.append($('<p><br></p>'));\n\t        }\n\t\n\t        // 编辑区域加入DOM\n\t        $textContainerElem.append($textElem);\n\t\n\t        // 设置通用的 class\n\t        $toolbarElem.addClass('w-e-toolbar');\n\t        $textContainerElem.addClass('w-e-text-container');\n\t        $textContainerElem.css('z-index', zIndex);\n\t        $textElem.addClass('w-e-text');\n\t\n\t        // 记录属性\n\t        this.$toolbarElem = $toolbarElem;\n\t        this.$textContainerElem = $textContainerElem;\n\t        this.$textElem = $textElem;\n\t\n\t        // 绑定 onchange\n\t        $textContainerElem.on('click keyup', function () {\n\t            _this.change && _this.change();\n\t        });\n\t        $toolbarElem.on('click', function () {\n\t            this.change && this.change();\n\t        });\n\t    },\n\t\n\t    // 封装 command\n\t    _initCommand: function _initCommand() {\n\t        this.cmd = new Command(this);\n\t    },\n\t\n\t    // 封装 selection range API\n\t    _initSelectionAPI: function _initSelectionAPI() {\n\t        this.selection = new API(this);\n\t    },\n\t\n\t    // 添加图片上传\n\t    _initUploadImg: function _initUploadImg() {\n\t        this.uploadImg = new UploadImg(this);\n\t    },\n\t\n\t    // 初始化菜单\n\t    _initMenus: function _initMenus() {\n\t        this.menus = new Menus(this);\n\t        this.menus.init();\n\t    },\n\t\n\t    // 添加 text 区域\n\t    _initText: function _initText() {\n\t        this.txt = new Text(this);\n\t        this.txt.init();\n\t    },\n\t\n\t    // 初始化选区，将光标定位到内容尾部\n\t    initSelection: function initSelection(newLine) {\n\t        var $textElem = this.$textElem;\n\t        var $children = $textElem.children();\n\t        if (!$children.length) {\n\t            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n\t            $textElem.append($('<p><br></p>'));\n\t            this.initSelection();\n\t            return;\n\t        }\n\t\n\t        var $last = $children.last();\n\t\n\t        if (newLine) {\n\t            // 新增一个空行\n\t            var html = $last.html().toLowerCase();\n\t            var nodeName = $last.getNodeName();\n\t            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n\t                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n\t                $textElem.append($('<p><br></p>'));\n\t                this.initSelection();\n\t                return;\n\t            }\n\t        }\n\t\n\t        this.selection.createRangeByElem($last, false, true);\n\t        this.selection.restoreSelection();\n\t    },\n\t\n\t    // 绑定事件\n\t    _bindEvent: function _bindEvent() {\n\t        // -------- 绑定 onchange 事件 --------\n\t        var onChangeTimeoutId = 0;\n\t        var beforeChangeHtml = this.txt.html();\n\t        var config$$1 = this.config;\n\t        var onchange = config$$1.onchange;\n\t        if (onchange && typeof onchange === 'function') {\n\t            // 触发 change 的有三个场景：\n\t            // 1. $textContainerElem.on('click keyup')\n\t            // 2. $toolbarElem.on('click')\n\t            // 3. editor.cmd.do()\n\t            this.change = function () {\n\t                // 判断是否有变化\n\t                var currentHtml = this.txt.html();\n\t                if (currentHtml.length === beforeChangeHtml.length) {\n\t                    return;\n\t                }\n\t\n\t                // 执行，使用节流\n\t                if (onChangeTimeoutId) {\n\t                    clearTimeout(onChangeTimeoutId);\n\t                }\n\t                onChangeTimeoutId = setTimeout(function () {\n\t                    // 触发配置的 onchange 函数\n\t                    onchange(currentHtml);\n\t                    beforeChangeHtml = currentHtml;\n\t                }, 200);\n\t            };\n\t        }\n\t    },\n\t\n\t    // 创建编辑器\n\t    create: function create() {\n\t        // 初始化配置信息\n\t        this._initConfig();\n\t\n\t        // 初始化 DOM\n\t        this._initDom();\n\t\n\t        // 封装 command API\n\t        this._initCommand();\n\t\n\t        // 封装 selection range API\n\t        this._initSelectionAPI();\n\t\n\t        // 添加 text\n\t        this._initText();\n\t\n\t        // 初始化菜单\n\t        this._initMenus();\n\t\n\t        // 添加 图片上传\n\t        this._initUploadImg();\n\t\n\t        // 初始化选区，将光标定位到内容尾部\n\t        this.initSelection(true);\n\t\n\t        // 绑定事件\n\t        this._bindEvent();\n\t    }\n\t};\n\t\n\t// 检验是否浏览器环境\n\ttry {\n\t    document;\n\t} catch (ex) {\n\t    throw new Error('请在浏览器环境下运行');\n\t}\n\t\n\t// polyfill\n\tpolyfill();\n\t\n\t// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\n\tvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,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) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}.w-e-text img.w-e-selected {  border: 2px solid #1e88e5;}.w-e-text img.w-e-selected:hover {  box-shadow: none;}';\n\t\n\t// 将 css 代码添加到 <style> 中\n\tvar style = document.createElement('style');\n\tstyle.type = 'text/css';\n\tstyle.innerHTML = inlinecss;\n\tdocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\t\n\t// 返回\n\tvar index = window.wangEditor || Editor;\n\t\n\treturn index;\n\t\n\t})));\n\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(67)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(166),\n\t  /* template */\n\t  __webpack_require__(130),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 49:\n/***/ (function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(3)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".avatar-uploader-icon{font-size:28px;color:#8c939d;width:178px;height:178px;line-height:178px;text-align:center}.avatar{width:100%;height:100%;display:block}\", \"\", {\"version\":3,\"sources\":[\"/./src/pages/article/edit.vue\"],\"names\":[],\"mappings\":\"AACA,sBACE,eAAgB,AAChB,cAAe,AACf,YAAa,AACb,aAAc,AACd,kBAAmB,AACnB,iBAAmB,CACpB,AACD,QACE,WAAY,AACZ,YAAa,AACb,aAAe,CAChB\",\"file\":\"edit.vue\",\"sourcesContent\":[\"\\n.avatar-uploader-icon {\\n  font-size: 28px;\\n  color: #8c939d;\\n  width: 178px;\\n  height: 178px;\\n  line-height: 178px;\\n  text-align: center;\\n}\\n.avatar {\\n  width: 100%;\\n  height: 100%;\\n  display: block;\\n}\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\t\n\t// exports\n\n\n/***/ }),\n\n/***/ 67:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(49);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(4)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!../../../node_modules/.0.25.0@css-loader/index.js?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./edit.vue\", function() {\n\t\t\t\tvar newContent = require(\"!!../../../node_modules/.0.25.0@css-loader/index.js?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./edit.vue\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ }),\n\n/***/ 130:\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"p2222\"\n\t  }, [_c('div', {\n\t    staticClass: \"p2020 m0020 bor-bottom\"\n\t  }, [_c('el-breadcrumb', {\n\t    attrs: {\n\t      \"separator\": \"/\"\n\t    }\n\t  }, [_c('el-breadcrumb-item', {\n\t    attrs: {\n\t      \"to\": {\n\t        path: '/article'\n\t      }\n\t    }\n\t  }, [_vm._v(\"文章列表\")]), _vm._v(\" \"), _c('el-breadcrumb-item', [_vm._v(\"编辑文章\")])], 1)], 1), _vm._v(\" \"), _c('div', [_c('el-form', {\n\t    ref: \"form\",\n\t    attrs: {\n\t      \"model\": _vm.form,\n\t      \"label-width\": \"80px\"\n\t    }\n\t  }, [_c('div', {\n\t    staticStyle: {\n\t      \"width\": \"500px\"\n\t    }\n\t  }, [_c('el-form-item', {\n\t    attrs: {\n\t      \"label\": \"封 面\"\n\t    }\n\t  }, [_c('el-upload', {\n\t    staticClass: \"upload-demo\",\n\t    attrs: {\n\t      \"drag\": \"\",\n\t      \"action\": _vm.upload_url + '/up/up_pic',\n\t      \"name\": \"Filedata\",\n\t      \"show-file-list\": false,\n\t      \"data\": {\n\t        'path': 'product/pic'\n\t      },\n\t      \"before-upload\": _vm.beforeAvatarUpload,\n\t      \"on-progress\": _vm.onAvatarUpload,\n\t      \"on-success\": _vm.handleAvatarScucess,\n\t      \"mutiple\": \"\"\n\t    }\n\t  }, [(_vm.upload_status) ? _c('i', {\n\t    staticClass: \"el-icon-loading avatar-uploader-icon\"\n\t  }) : _vm._e(), _vm._v(\" \"), (_vm.thumb_url) ? _c('img', {\n\t    staticClass: \"avatar\",\n\t    attrs: {\n\t      \"src\": _vm.thumb_url\n\t    }\n\t  }) : _c('i', {\n\t    staticClass: \"el-icon-plus avatar-uploader-icon\"\n\t  })])], 1), _vm._v(\" \"), _c('el-form-item', {\n\t    attrs: {\n\t      \"label\": \"标题\"\n\t    }\n\t  }, [_c('el-input', {\n\t    model: {\n\t      value: (_vm.form.title),\n\t      callback: function($$v) {\n\t        _vm.form.title = $$v\n\t      },\n\t      expression: \"form.title\"\n\t    }\n\t  })], 1), _vm._v(\" \"), _c('el-form-item', {\n\t    attrs: {\n\t      \"label\": \"作者\"\n\t    }\n\t  }, [_c('el-input', {\n\t    model: {\n\t      value: (_vm.form.author),\n\t      callback: function($$v) {\n\t        _vm.form.author = $$v\n\t      },\n\t      expression: \"form.author\"\n\t    }\n\t  })], 1), _vm._v(\" \"), _c('el-form-item', {\n\t    attrs: {\n\t      \"label\": \"分类\"\n\t    }\n\t  }, [_c('el-select', {\n\t    attrs: {\n\t      \"placeholder\": \"请选择文章分类\"\n\t    },\n\t    model: {\n\t      value: (_vm.form.type),\n\t      callback: function($$v) {\n\t        _vm.form.type = $$v\n\t      },\n\t      expression: \"form.type\"\n\t    }\n\t  }, _vm._l((_vm.articleType), function(item, key) {\n\t    return _c('el-option', {\n\t      attrs: {\n\t        \"label\": item,\n\t        \"value\": key\n\t      }\n\t    })\n\t  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n\t    attrs: {\n\t      \"label\": \"摘要\"\n\t    }\n\t  }, [_c('el-input', {\n\t    attrs: {\n\t      \"type\": \"textarea\"\n\t    },\n\t    model: {\n\t      value: (_vm.form.digest),\n\t      callback: function($$v) {\n\t        _vm.form.digest = $$v\n\t      },\n\t      expression: \"form.digest\"\n\t    }\n\t  })], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n\t    staticStyle: {\n\t      \"width\": \"900px\"\n\t    },\n\t    attrs: {\n\t      \"label\": \"内 容\"\n\t    }\n\t  }, [_c('div', {\n\t    attrs: {\n\t      \"id\": \"editEditor\"\n\t    }\n\t  })]), _vm._v(\" \"), _c('el-form-item', [_c('el-button', {\n\t    attrs: {\n\t      \"type\": \"primary\"\n\t    },\n\t    on: {\n\t      \"click\": _vm.onSubmit\n\t    }\n\t  }, [_vm._v(\"保存\")])], 1)], 1)], 1)])\n\t},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 166:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _wangeditor = __webpack_require__(19);\n\t\n\tvar _wangeditor2 = _interopRequireDefault(_wangeditor);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  data: function data() {\n\t    return {\n\t      displayType: {\n\t        0: '不显示',\n\t        1: '显示'\n\t      },\n\t      articleType: {\n\t        0: '未分类',\n\t        1: '公司新闻',\n\t        2: '品牌活动',\n\t        3: '每周学生营养餐菜单',\n\t        4: '对外招标信息'\n\t      },\n\t      content: '',\n\t      form: {\n\t        title: '',\n\t        author: '',\n\t        digest: '',\n\t        content: '',\n\t        type: '0',\n\t        wangE: ''\n\t      },\n\t      upload_url: '',\n\t      thumb_url: '',\n\t      wangE: '',\n\t      upload_status: false\n\t\n\t    };\n\t  },\n\t\n\t  computed: {},\n\t  mounted: function mounted() {\n\t    this.wangEditorInit();\n\t    this.getArticle();\n\t    this.upload_url = this.$apiurl;\n\t  },\n\t  attached: function attached() {},\n\t\n\t  methods: {\n\t    getArticle: function getArticle() {\n\t      var _this = this;\n\t\n\t      this.$rqt.post('/article/get_article_by_id', {\n\t        id: this.$route.params.id\n\t      }).success(function (res) {\n\t        _this.form = res.data.detail;\n\t        _this.thumb_url = 'http://pic02.keyinong.com/' + res.data.detail.thumb_url;\n\t        _this.wangE.txt.html(res.data.detail.content);\n\t      });\n\t    },\n\t    wangEditorInit: function wangEditorInit() {\n\t      var that = this;\n\t      this.wangE = new _wangeditor2.default('#editEditor');\n\t      var config = {\n\t        uploadImgServer: this.$apiurl + '/up/up_pic2',\n\t        uploadImgParams: {\n\t          token: this.$auth.getData('token')\n\t        },\n\t        uploadFileName: 'Filedata',\n\t        uploadImgMaxSize: 2 * 1024 * 1024,\n\t        uploadImgMaxLength: 1,\n\t        uploadImgHooks: {\n\t          success: function success(xhr, editor, result) {\n\t            that.addImageToContent(result.key);\n\t          },\n\t          fail: function fail(xhr, editor, result) {\n\t            console.log(result);\n\t            if (result.error == 0) {\n\t              that.addImageToContent(result.key);\n\t            }\n\t          },\n\t          error: function error(xhr, editor) {\n\t            console.log(xhr);\n\t          }\n\t        }\n\t      };\n\t      this.wangE.customConfig = config;\n\t      this.wangE.customConfig.customAlert = function (info) {};\n\t      this.wangE.create();\n\t    },\n\t    addImageToContent: function addImageToContent(url) {\n\t      var url = 'http://pic02.keyinong.com/' + url;\n\t      this.wangE.txt.append('<img style=\"max-width:100%;\" src=' + url + '>');\n\t    },\n\t    beforeAvatarUpload: function beforeAvatarUpload(file) {\n\t      var isLt2M = file.size / 1024 / 1024 < 2;\n\t      if (!isLt2M) {\n\t        this.$message.error('亲，上传图片大小不能超过 2MB');\n\t      }\n\t    },\n\t    onAvatarUpload: function onAvatarUpload(event, file, fileList) {\n\t      this.upload_status = true;\n\t    },\n\t    handleAvatarScucess: function handleAvatarScucess(res) {\n\t      this.upload_status = false;\n\t      this.thumb_url = 'http://pic02.keyinong.com/' + res;\n\t      this.form.thumb_url = res;\n\t    },\n\t    onSubmit: function onSubmit() {\n\t      var _this2 = this;\n\t\n\t      this.form.content = this.wangE.txt.html();\n\t      if (this.form.title == '') {\n\t        this.$message({\n\t          message: '请输入文章标题',\n\t          type: 'info'\n\t        });\n\t        return false;\n\t      }\n\t      this.$rqt.post('/article/save', this.form).success(function (res) {\n\t        if (res.code) {\n\t          _this2.$message({\n\t            message: res.msg,\n\t            type: 'success'\n\t          });\n\t        } else {\n\t          _this2.$message({\n\t            message: res.msg,\n\t            type: 'info'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  },\n\t  components: {}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/default/201709190016/js/2.a2d2c8878fff5c3efaf0.js","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (selector.nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector)) {\n        // DOM List\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn, false);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                }, false);\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn, false);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 5000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    }\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;');\n}\n\n// 返回百分比的格式\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $elem.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        if (!text || !link) {\n            return;\n        }\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: [{ $elem: $('<i style=\"color:#000000;\" class=\"w-e-icon-pencil2\"></i>'), value: '#000000' }, { $elem: $('<i style=\"color:#eeece0;\" class=\"w-e-icon-pencil2\"></i>'), value: '#eeece0' }, { $elem: $('<i style=\"color:#1c487f;\" class=\"w-e-icon-pencil2\"></i>'), value: '#1c487f' }, { $elem: $('<i style=\"color:#4d80bf;\" class=\"w-e-icon-pencil2\"></i>'), value: '#4d80bf' }, { $elem: $('<i style=\"color:#c24f4a;\" class=\"w-e-icon-pencil2\"></i>'), value: '#c24f4a' }, { $elem: $('<i style=\"color:#8baa4a;\" class=\"w-e-icon-pencil2\"></i>'), value: '#8baa4a' }, { $elem: $('<i style=\"color:#7b5ba1;\" class=\"w-e-icon-pencil2\"></i>'), value: '#7b5ba1' }, { $elem: $('<i style=\"color:#46acc8;\" class=\"w-e-icon-pencil2\"></i>'), value: '#46acc8' }, { $elem: $('<i style=\"color:#f9963b;\" class=\"w-e-icon-pencil2\"></i>'), value: '#f9963b' }, { $elem: $('<i style=\"color:#ffffff;\" class=\"w-e-icon-pencil2\"></i>'), value: '#ffffff' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"><i/></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: [{ $elem: $('<i style=\"color:#000000;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#000000' }, { $elem: $('<i style=\"color:#eeece0;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#eeece0' }, { $elem: $('<i style=\"color:#1c487f;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#1c487f' }, { $elem: $('<i style=\"color:#4d80bf;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#4d80bf' }, { $elem: $('<i style=\"color:#c24f4a;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#c24f4a' }, { $elem: $('<i style=\"color:#8baa4a;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#8baa4a' }, { $elem: $('<i style=\"color:#7b5ba1;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#7b5ba1' }, { $elem: $('<i style=\"color:#46acc8;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#46acc8' }, { $elem: $('<i style=\"color:#f9963b;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#f9963b' }, { $elem: $('<i style=\"color:#ffffff;\" class=\"w-e-icon-paint-brush\"></i>'), value: '#ffffff' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"><i/>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        if (!UA.isIE()) {\n            editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var content = void 0,\n            $targetELem = void 0;\n        if ($selectionElem.getNodeName() === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if ($selectionElem.getNodeName() === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"><i/>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"><i/>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 拼接表情字符串\n        var faceHtml = '';\n        var faceStr = '😀 😃 😄 😁 😆 😅 😂  😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😜 😝 😛 🤑 🤗 🤓 😎 😏 😒 😞 😔 😟 😕 🙁  😣 😖 😫 😩 😤 😠 😡 😶 😐 😑 😯 😦 😧 😮 😲 😵 😳 😱 😨 😰 😢 😥 😭 😓 😪 😴 🙄 🤔 😬 🤐';\n        faceStr.split(/\\s/).forEach(function (item) {\n            if (item) {\n                faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n            }\n        });\n\n        var handHtml = '';\n        var handStr = '🙌 👏 👋 👍 👎 👊 ✊ ️👌 ✋ 👐 💪 🙏 ️👆 👇 👈 👉 🖕 🖐 🤘 🖖';\n        handStr.split(/\\s/).forEach(function (item) {\n            if (item) {\n                handHtml += '<span class=\"w-e-item\">' + item + '</span>';\n            }\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '表情',\n                // 模板\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                // 事件绑定\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        _this._insert(target.innerHTML);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }, // first tab end\n            {\n                // 标题\n                title: '手势',\n                // 模板\n                tpl: '<div class=\"w-e-emoticon-container\">' + handHtml + '</div>',\n                // 事件绑定\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        _this._insert(target.innerHTML);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // second tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emoji) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<span>' + emoji + '</span>');\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-image\"><i/></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").+?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").+?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if (val == null) {\n            return $textElem.html();\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if (val == null) {\n            return $textElem.text();\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var pasteFilterStyle = editor.config.pasteFilterStyle;\n        var $textElem = editor.$textElem;\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (nodeName === 'DIV' || $textElem.html() === '<p><br></p>' || !pasteFilterStyle) {\n                // 是 div，可粘贴过滤样式的文字和链接。另外，不过滤粘贴的样式，也可直接插入 HTML\n                if (!pasteHtml) {\n                    return;\n                }\n                try {\n                    // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                    // 因此执行 insertHTML 会报错\n                    editor.cmd.do('insertHTML', pasteHtml);\n                } catch (ex) {\n                    // 此时使用 pasteText 来兼容一下\n                    editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                }\n            } else {\n                // 不是 div，证明在已有内容的元素中粘贴，只粘贴纯文本\n                if (!pasteText) {\n                    return;\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var selectedClass = 'w-e-selected';\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            // 去掉所有图片的 selected 样式\n            $textElem.find('img').removeClass(selectedClass);\n\n            // 为点击的图片增加样式，并记录当前图片\n            $img.addClass(selectedClass);\n            editor._selectedImg = $img;\n\n            // 修改选取\n            editor.selection.createRangeByElem($img);\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 取消掉 selected 样式，并删除记录\n            $textElem.find('img').removeClass(selectedClass);\n            editor._selectedImg = null;\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        // 保证传入的参数是 html 代码\n        var test = /^<.+>$/.test(html);\n        if (!test && !UA.isWebkit()) {\n            // webkit 可以插入非 html 格式的文字\n            throw new Error('执行 insertHTML 命令时传入的参数必须是 html 格式');\n        }\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1000 / 1000;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                val = encodeURIComponent(val);\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgServer.indexOf('?') > 0) {\n                    uploadImgServer += '&';\n                } else {\n                    uploadImgServer += '?';\n                }\n                uploadImgServer = uploadImgServer + key + '=' + val;\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    return;\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, 200);\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,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) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}.w-e-text img.w-e-selected {  border: 2px solid #1e88e5;}.w-e-text img.w-e-selected:hover {  box-shadow: none;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.3.0.8@wangeditor/release/wangEditor.js\n// module id = 19\n// module chunks = 0 2","\n/* styles */\nrequire(\"!!../../../node_modules/.1.0.1@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector?type=styles&index=0!./edit.vue\")\n\nvar Component = require(\"!../../../node_modules/.10.3.0@vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/.10.3.0@vue-loader/lib/selector?type=script&index=0!./edit.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/.10.3.0@vue-loader/lib/template-compiler?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector?type=template&index=0!./edit.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/article/edit.vue\n// module id = 30\n// module chunks = 2","exports = module.exports = require(\"../../../node_modules/.0.25.0@css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".avatar-uploader-icon{font-size:28px;color:#8c939d;width:178px;height:178px;line-height:178px;text-align:center}.avatar{width:100%;height:100%;display:block}\", \"\", {\"version\":3,\"sources\":[\"/./src/pages/article/edit.vue\"],\"names\":[],\"mappings\":\"AACA,sBACE,eAAgB,AAChB,cAAe,AACf,YAAa,AACb,aAAc,AACd,kBAAmB,AACnB,iBAAmB,CACpB,AACD,QACE,WAAY,AACZ,YAAa,AACb,aAAe,CAChB\",\"file\":\"edit.vue\",\"sourcesContent\":[\"\\n.avatar-uploader-icon {\\n  font-size: 28px;\\n  color: #8c939d;\\n  width: 178px;\\n  height: 178px;\\n  line-height: 178px;\\n  text-align: center;\\n}\\n.avatar {\\n  width: 100%;\\n  height: 100%;\\n  display: block;\\n}\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.0.25.0@css-loader?sourceMap!./~/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!./~/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./src/pages/article/edit.vue\n// module id = 49\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/.0.25.0@css-loader/index.js?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./edit.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/.1.0.0@vue-style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/.0.25.0@css-loader/index.js?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./edit.vue\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/.0.25.0@css-loader/index.js?sourceMap!../../../node_modules/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!../../../node_modules/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./edit.vue\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.1.0.1@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"extract\":true,\"remove\":true}!./~/.1.0.0@vue-style-loader!./~/.0.25.0@css-loader?sourceMap!./~/.10.3.0@vue-loader/lib/style-rewriter.js?id=data-v-2c7e0fc1!./~/.10.3.0@vue-loader/lib/selector.js?type=styles&index=0!./src/pages/article/edit.vue\n// module id = 67\n// module chunks = 2","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"p2222\"\n  }, [_c('div', {\n    staticClass: \"p2020 m0020 bor-bottom\"\n  }, [_c('el-breadcrumb', {\n    attrs: {\n      \"separator\": \"/\"\n    }\n  }, [_c('el-breadcrumb-item', {\n    attrs: {\n      \"to\": {\n        path: '/article'\n      }\n    }\n  }, [_vm._v(\"文章列表\")]), _vm._v(\" \"), _c('el-breadcrumb-item', [_vm._v(\"编辑文章\")])], 1)], 1), _vm._v(\" \"), _c('div', [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"model\": _vm.form,\n      \"label-width\": \"80px\"\n    }\n  }, [_c('div', {\n    staticStyle: {\n      \"width\": \"500px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"封 面\"\n    }\n  }, [_c('el-upload', {\n    staticClass: \"upload-demo\",\n    attrs: {\n      \"drag\": \"\",\n      \"action\": _vm.upload_url + '/up/up_pic',\n      \"name\": \"Filedata\",\n      \"show-file-list\": false,\n      \"data\": {\n        'path': 'product/pic'\n      },\n      \"before-upload\": _vm.beforeAvatarUpload,\n      \"on-progress\": _vm.onAvatarUpload,\n      \"on-success\": _vm.handleAvatarScucess,\n      \"mutiple\": \"\"\n    }\n  }, [(_vm.upload_status) ? _c('i', {\n    staticClass: \"el-icon-loading avatar-uploader-icon\"\n  }) : _vm._e(), _vm._v(\" \"), (_vm.thumb_url) ? _c('img', {\n    staticClass: \"avatar\",\n    attrs: {\n      \"src\": _vm.thumb_url\n    }\n  }) : _c('i', {\n    staticClass: \"el-icon-plus avatar-uploader-icon\"\n  })])], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"标题\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.form.title),\n      callback: function($$v) {\n        _vm.form.title = $$v\n      },\n      expression: \"form.title\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"作者\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.form.author),\n      callback: function($$v) {\n        _vm.form.author = $$v\n      },\n      expression: \"form.author\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"分类\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"placeholder\": \"请选择文章分类\"\n    },\n    model: {\n      value: (_vm.form.type),\n      callback: function($$v) {\n        _vm.form.type = $$v\n      },\n      expression: \"form.type\"\n    }\n  }, _vm._l((_vm.articleType), function(item, key) {\n    return _c('el-option', {\n      attrs: {\n        \"label\": item,\n        \"value\": key\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"摘要\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.form.digest),\n      callback: function($$v) {\n        _vm.form.digest = $$v\n      },\n      expression: \"form.digest\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n    staticStyle: {\n      \"width\": \"900px\"\n    },\n    attrs: {\n      \"label\": \"内 容\"\n    }\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"editEditor\"\n    }\n  })]), _vm._v(\" \"), _c('el-form-item', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.onSubmit\n    }\n  }, [_vm._v(\"保存\")])], 1)], 1)], 1)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/.10.3.0@vue-loader/lib/template-compiler.js?id=data-v-2c7e0fc1!./~/.10.3.0@vue-loader/lib/selector.js?type=template&index=0!./src/pages/article/edit.vue\n// module id = 130\n// module chunks = 2","<template lang=\"html\">\n<div class=\"p2222\">\n  <div class=\"p2020 m0020 bor-bottom\">\n    <el-breadcrumb separator=\"/\">\n      <el-breadcrumb-item :to=\"{ path: '/article' }\">文章列表</el-breadcrumb-item>\n      <el-breadcrumb-item>编辑文章</el-breadcrumb-item>\n    </el-breadcrumb>\n  </div>\n  <div>\n    <el-form ref=\"form\" :model=\"form\" label-width=\"80px\">\n      <div style=\"width:500px\">\n        <el-form-item label=\"封 面\">\n          <el-upload class=\"upload-demo\" drag\n            :action=\"upload_url+'/up/up_pic'\"\n            name = \"Filedata\"\n            :show-file-list=\"false\"\n            :data=\"{\n              'path':'product/pic'\n            }\"\n            :before-upload=\"beforeAvatarUpload\"\n            :on-progress=\"onAvatarUpload\"\n            :on-success=\"handleAvatarScucess\"\n            mutiple>\n            <i v-if=\"upload_status\" class=\"el-icon-loading avatar-uploader-icon\"></i>\n            <img v-if=\"thumb_url\" :src=\"thumb_url\" class=\"avatar\">\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n          </el-upload>\n        </el-form-item>\n        <el-form-item label=\"标题\">\n          <el-input v-model=\"form.title\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"作者\">\n          <el-input v-model=\"form.author\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"分类\">\n          <el-select v-model=\"form.type\" placeholder=\"请选择文章分类\">\n            <el-option\n              v-for=\"(item,key) in articleType\"\n              :label=\"item\"\n              :value=\"key\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"摘要\">\n          <el-input type=\"textarea\" v-model=\"form.digest\"></el-input>\n        </el-form-item>\n      </div>\n      <el-form-item  style=\"width:900px\" label=\"内 容\">\n         <div id=\"editEditor\"></div>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"onSubmit\">保存</el-button>\n      </el-form-item>\n    </el-form>\n           \n  </div>\n</div>\n  \n</template>\n<script>\nimport E from 'wangeditor'\n\nexport default {\n  data() {\n    return {\n      displayType: {\n        0: '不显示',\n        1: '显示'\n      },\n      articleType: {\n        0: '未分类',\n        1: '公司新闻',\n        2: '品牌活动',\n        3: '每周学生营养餐菜单',\n        4: '对外招标信息'\n      },\n      content: '',\n      form: {\n        title: '',\n        author: '',\n        digest: '',\n        content: '',\n        type: '0',\n        wangE: ''\n      },\n      upload_url: '',\n      thumb_url: '',\n      wangE: '',\n      upload_status: false\n\n    }\n  },\n  computed: {},\n  mounted() {\n    this.wangEditorInit()\n    this.getArticle()\n    this.upload_url = this.$apiurl\n  },\n  attached() {},\n  methods: {\n    getArticle() {\n      /* eslint-disable */\n       this.$rqt.post('/article/get_article_by_id', {\n        id:this.$route.params.id\n       }).success((res) => {\n          this.form = res.data.detail;\n          this.thumb_url = 'http://pic02.keyinong.com/'+res.data.detail.thumb_url\n          this.wangE.txt.html(res.data.detail.content)\n          // console.log(this.form)\n      })\n    },\n    wangEditorInit(){\n      var that = this\n      this.wangE = new E('#editEditor')\n      var config = {\n        uploadImgServer:this.$apiurl+'/up/up_pic2',\n        uploadImgParams:{\n          token: this.$auth.getData('token')  \n        },\n        uploadFileName:'Filedata',\n        uploadImgMaxSize:2 * 1024 * 1024,\n        uploadImgMaxLength:1,\n        uploadImgHooks:{\n          success: function (xhr, editor, result) {\n              that.addImageToContent(result.key)\n          },\n          fail: function (xhr, editor, result) {\n              console.log(result)\n              if(result.error == 0){\n                that.addImageToContent(result.key)\n              }\n              \n          },\n          error: function (xhr, editor) {\n              console.log(xhr)\n          }\n        },\n      }\n      this.wangE.customConfig = config;\n      this.wangE.customConfig.customAlert = function (info) {\n          // info 是需要提示的内容\n          // console.log(info)\n      }\n      this.wangE.create()\n    },\n    addImageToContent(url){\n      var url = 'http://pic02.keyinong.com/'+url\n      this.wangE.txt.append('<img style=\"max-width:100%;\" src='+url+'>')\n    },\n    beforeAvatarUpload(file) {\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isLt2M) {\n        this.$message.error('亲，上传图片大小不能超过 2MB');\n      }\n    },\n    onAvatarUpload(event, file, fileList){\n      this.upload_status = true\n    },\n    handleAvatarScucess(res) {\n      this.upload_status = false\n      this.thumb_url = `http://pic02.keyinong.com/${res}`\n      this.form.thumb_url = res\n    },\n    onSubmit(){\n      this.form.content = this.wangE.txt.html()\n      if(this.form.title==''){\n        this.$message({\n          message: '请输入文章标题',\n          type: 'info'\n        })\n        return false\n      }\n      this.$rqt.post('/article/save', this.form).success((res) => {\n        if(res.code){\n          this.$message({\n            message: res.msg,\n            type: 'success'\n          });\n        }else{\n          this.$message({\n            message: res.msg,\n            type: 'info'\n          });\n        }\n      })\n    }\n  },\n  components: {}\n}\n</script>\n<style lang=\"css\">\n  .avatar-uploader-icon {\n    font-size: 28px;\n    color: #8c939d;\n    width: 178px;\n    height: 178px;\n    line-height: 178px;\n    text-align: center;\n  }\n  .avatar {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n</style>\n\n\n// WEBPACK FOOTER //\n// edit.vue?2cf80048"],"sourceRoot":""}